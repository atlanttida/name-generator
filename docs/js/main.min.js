(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
const numBackgrounds = 9;
function getRandomInt(max) {
    return Math.floor(Math.random() * Math.floor(max));
}
document.body.className += " bg-image-"+(getRandomInt(numBackgrounds)+1);

function changeBg(){
    document.body.className = document.body.className.replace(/bg-image-\d+/,"bg-image-"+(getRandomInt(numBackgrounds)+1))
}

module.exports={changeBg}
},{}],2:[function(require,module,exports){
const NameGen = require('../lib/namegen.js');
require('../lib/extend-namegen');
const BgSwitcher = require("./background-switcher");

const maxNames = 5;
var generator = NameGen.compile(/*"G The P k Q"*/
            //"The P Q"
            window.GENERATOR_PATTERN?htmlDecode(window.GENERATOR_PATTERN):"G The P"

);
var output = document.querySelector(".output");

// document.querySelector("input[name=pattern]").oninput=document.querySelector("input[name=pattern]").onchange = (e) => {
//     generator = NameGen.compile(e.target.value);
// }
document.querySelector("button[name=go]").onclick = () =>{

    document.querySelector(".usr").style.display="none";

    //show ads
    document.querySelectorAll(".google-ad").forEach(el =>el.classList.remove("d-none"));
    output.innerHTML = "";
    BgSwitcher.changeBg();
    for (var i=0;i<maxNames;i++){
        var p = document.createElement("p");
        var generatedName = generator.toString().capitalize();
        p.innerHTML = '<button class="btn btn-outline-light btn-lg"> '+generatedName + ' | <i class="bi bi-clipboard-check"></i> Copy</button>';
        var btn = output.appendChild(p).firstChild;
        btn["data-txt"] = generatedName;
        btn.onclick = copyToClipboard;
    }
}


function copyToClipboard(e) {
    /* Get the text field */
    var input = document.createElement("textarea");
    input.style.style = {position: 'absolute', left: '-9999px'};
    input.value = e.target["data-txt"];
    document.body.appendChild(input);
    /* Select the text field */
    input.select();
    input.setSelectionRange(0, 99999); /* For mobile devices */
  
    /* Copy the text inside the text field */
    document.execCommand("copy");
  
    /* Alert the copied text */
    // alert("Copied the text: " + input.value);
    input.parentElement.removeChild(input);
  }

  String.prototype.capitalize = function() {
    return this.replace(/(^\w{1})|(\s+\w{1})/g, letter => letter.toUpperCase());
  }

function htmlDecode(input){
  var e = document.createElement('textarea');
  e.innerHTML = input;
  // handle case of empty input
  return e.childNodes.length === 0 ? "" : e.childNodes[0].nodeValue;
}
},{"../lib/extend-namegen":6,"../lib/namegen.js":10,"./background-switcher":1}],3:[function(require,module,exports){
const ADJECTIVES = [
'Supreme',
'Amazing',
'Incredible',
'Fancy',
'Cute',
'Bossy',
'Crazy',
'Jumping',
'Shy',
'Smart ',
'Wealthy',
'Sad',
'Excited',
'Brave',
'Hyper',
'Honest',
'Macho',
'Flirty',
'Friendly',
'Sensible',
'Spoiled',
'Cheerful',
'Sweet',
'Prickly',
'Defiant',
'Empty',
'Timid',
'Sporty',
'Sunny',
'Bully',
'Cruel',
'Exotic',
'Playful',
'Strong',
'Lovely',
'Deadly',
'Sleepy',
'Majestic',
'Crafty',
'Graceful',
'Boring',
'Sarcastic',
'Lazy',
'Bright',
'Sassy',
'Bold',
'Wild',
'Angry',
'Big',
'Small',
'Tiny',
'Grumpy',
'Muddy',
'Clumsy',
'Odd',
'Lonely',
'Hungry',
'Dizzy',
'Long',
'Mini',
'Short',
'Slow',
'Rapid',
'Quick ',
'Handsome',
'Young',
'Fast',
'Ancient',
'Annoying',
'Aggressive',
'Adventurous',
'Sparkling',
'Precious',
'Defiant',
'Confused',
'Fabulous',
'Fearless',
'Invincible',
'Evil',
'Red',
'Dark',
'Red',
'Silver',
'Barbarian',
'Iron ',
'Steel',
'Blue'
].map(text => text.trim().toLocaleLowerCase());


module.exports = ADJECTIVES;

},{}],4:[function(require,module,exports){
module.exports = [
    "Aardvark",
    "Albatross",
    "Alligator",
    "Alpaca",
    "Ant",
    "Anteater",
    "Antelope",
    "Ape",
    "Armadillo",
    "Donkey",
    "Baboon",
    "Badger",
    "Barracuda",
    "Bat",
    "Bear",
    "Beaver",
    "Bee",
    "Bison",
    "Boar",
    "Buffalo",
    "Butterfly",
    "Camel",
    "Capybara",
    "Caribou",
    "Cassowary",
    "Cat",
    "Caterpillar",
    "Cattle",
    "Chamois",
    "Cheetah",
    "Chicken",
    "Chimpanzee",
    "Chinchilla",
    "Chough",
    "Clam",
    "Cobra",
    "Cockroach",
    "Cod",
    "Cormorant",
    "Coyote",
    "Crab",
    "Crane",
    "Crocodile",
    "Crow",
    "Curlew",
    "Deer",
    "Dinosaur",
    "Dog",
    "Dogfish",
    "Dolphin",
    "Dotterel",
    "Dove",
    "Dragonfly",
    "Duck",
    "Dugong",
    "Dunlin",
    "Eagle",
    "Echidna",
    "Eel",
    "Eland",
    "Elephant",
    "Elk",
    "Emu",
    "Falcon",
    "Ferret",
    "Finch",
    "Fish",
    "Flamingo",
    "Fly",
    "Fox",
    "Frog",
    "Gaur",
    "Gazelle",
    "Gerbil",
    "Giraffe",
    "Gnat",
    "Gnu",
    "Goat",
    "Goldfinch",
    "Goldfish",
    "Goose",
    "Gorilla",
    "Goshawk",
    "Grasshopper",
    "Grouse",
    "Guanaco",
    "Gull",
    "Hamster",
    "Hare",
    "Hawk",
    "Hedgehog",
    "Heron",
    "Herring",
    "Hippopotamus",
    "Hornet",
    "Horse",
    "Human",
    "Hummingbird",
    "Hyena",
    "Ibex",
    "Ibis",
    "Jackal",
    "Jaguar",
    "Jay",
    "Jellyfish",
    "Kangaroo",
    "Kingfisher",
    "Koala",
    "Kookabura",
    "Kouprey",
    "Kudu",
    "Lapwing",
    "Lark",
    "Lemur",
    "Leopard",
    "Lion",
    "Llama",
    "Lobster",
    "Locust",
    "Loris",
    "Louse",
    "Lyrebird",
    "Magpie",
    "Mallard",
    "Manatee",
    "Mandrill",
    "Mantis",
    "Marten",
    "Meerkat",
    "Mink",
    "Mole",
    "Mongoose",
    "Monkey",
    "Moose",
    "Mosquito",
    "Mouse",
    "Mule",
    "Narwhal",
    "Newt",
    "Nightingale",
    "Octopus",
    "Okapi",
    "Opossum",
    "Oryx",
    "Ostrich",
    "Otter",
    "Owl",
    "Oyster",
    "Panther",
    "Parrot",
    "Partridge",
    "Peafowl",
    "Pelican",
    "Penguin",
    "Pheasant",
    "Pig",
    "Pigeon",
    "Pony",
    "Porcupine",
    "Porpoise",
    "Quail",
    "Quelea",
    "Quetzal",
    "Rabbit",
    "Raccoon",
    "Rail",
    "Ram",
    "Rat",
    "Raven",
    "Red deer",
    "Red panda",
    "Reindeer",
    "Rhinoceros",
    "Rook",
    "Salamander",
    "Salmon",
    "Sand Dollar",
    "Sandpiper",
    "Sardine",
    "Scorpion",
    "Seahorse",
    "Seal",
    "Shark",
    "Sheep",
    "Shrew",
    "Skunk",
    "Snail",
    "Snake",
    "Sparrow",
    "Spider",
    "Spoonbill",
    "Squid",
    "Squirrel",
    "Starling",
    "Stingray",
    "Stinkbug",
    "Stork",
    "Swallow",
    "Swan",
    "Tapir",
    "Tarsier",
    "Termite",
    "Tiger",
    "Toad",
    "Trout",
    "Turkey",
    "Turtle",
    "Viper",
    "Vulture",
    "Wallaby",
    "Walrus",
    "Wasp",
    "Weasel",
    "Whale",
    "Wildcat",
    "Wolf",
    "Wolverine",
    "Wombat",
    "Woodcock",
    "Woodpecker",
    "Worm",
    "Wren",
    "Yak",
    "Zebra"
].map(text => text.trim().toLocaleLowerCase());
},{}],5:[function(require,module,exports){
const CSS_COLORS = [
    "AliceBlue",
    "AntiqueWhite",
    "Aqua",
    "Aquamarine",
    "Azure",
    "Beige",
    "Bisque",
    "Black",
    "BlanchedAlmond",
    "Blue",
    "BlueViolet",
    "Brown",
    "BurlyWood",
    "CadetBlue",
    "Chartreuse",
    "Chocolate",
    "Coral",
    "CornflowerBlue",
    "Cornsilk",
    "Crimson",
    "Cyan",
    "DarkBlue",
    "DarkCyan",
    "DarkGoldenRod",
    "DarkGray",
    "DarkGrey",
    "DarkGreen",
    "DarkKhaki",
    "DarkMagenta",
    "DarkOliveGreen",
    "DarkOrange",
    "DarkOrchid",
    "DarkRed",
    "DarkSalmon",
    "DarkSeaGreen",
    "DarkSlateBlue",
    "DarkSlateGray",
    "DarkSlateGrey",
    "DarkTurquoise",
    "DarkViolet",
    "DeepPink",
    "DeepSkyBlue",
    "DimGray",
    "DimGrey",
    "DodgerBlue",
    "FireBrick",
    "FloralWhite",
    "ForestGreen",
    "Fuchsia",
    "Gainsboro",
    "GhostWhite",
    "Gold",
    "GoldenRod",
    "Gray",
    "Grey",
    "Green",
    "GreenYellow",
    "HoneyDew",
    "HotPink",
    "IndianRed",
    "Indigo",
    "Ivory",
    "Khaki",
    "Lavender",
    "LavenderBlush",
    "LawnGreen",
    "LemonChiffon",
    "LightBlue",
    "LightCoral",
    "LightCyan",
    "LightGoldenRodYellow",
    "LightGray",
    "LightGrey",
    "LightGreen",
    "LightPink",
    "LightSalmon",
    "LightSeaGreen",
    "LightSkyBlue",
    "LightSlateGray",
    "LightSlateGrey",
    "LightSteelBlue",
    "LightYellow",
    "Lime",
    "LimeGreen",
    "Linen",
    "Magenta",
    "Maroon",
    "MediumAquaMarine",
    "MediumBlue",
    "MediumOrchid",
    "MediumPurple",
    "MediumSeaGreen",
    "MediumSlateBlue",
    "MediumSpringGreen",
    "MediumTurquoise",
    "MediumVioletRed",
    "MidnightBlue",
    "MintCream",
    "MistyRose",
    "Moccasin",
    "NavajoWhite",
    "Navy",
    "OldLace",
    "Olive",
    "OliveDrab",
    "Orange",
    "OrangeRed",
    "Orchid",
    "PaleGoldenRod",
    "PaleGreen",
    "PaleTurquoise",
    "PaleVioletRed",
    "PapayaWhip",
    "PeachPuff",
    "Peru",
    "Pink",
    "Plum",
    "PowderBlue",
    "Purple",
    "RebeccaPurple",
    "Red",
    "RosyBrown",
    "RoyalBlue",
    "SaddleBrown",
    "Salmon",
    "SandyBrown",
    "SeaGreen",
    "SeaShell",
    "Sienna",
    "Silver",
    "SkyBlue",
    "SlateBlue",
    "SlateGray",
    "SlateGrey",
    "Snow",
    "SpringGreen",
    "SteelBlue",
    "Tan",
    "Teal",
    "Thistle",
    "Tomato",
    "Turquoise",
    "Violet",
    "Wheat",
    "White",
    "WhiteSmoke",
    "Yellow",
    "YellowGreen",
  ].map(text => text.replace( /([A-Z])/g, " $1" ).trim().toLocaleLowerCase()).filter(text => text.indexOf(" ")<0);

  module.exports = CSS_COLORS;
},{}],6:[function(require,module,exports){
const NameGen = require("./namegen");

Object.assign(NameGen.symbols,{
    k:require("./css-colors"),
    P:require("./adjectives"),
    Q:require("./animals"),
    G:require("./gamer-girl-names"),
    b:require("./gamer-boy-names"),
    n:require("./gamer-neutral-names"),
});

module.exports ={}
},{"./adjectives":3,"./animals":4,"./css-colors":5,"./gamer-boy-names":7,"./gamer-girl-names":8,"./gamer-neutral-names":9,"./namegen":10}],7:[function(require,module,exports){
module.exports = [
'Arsenic',
'Aspect',
'Bender',
'Big Papa',
'Bowser',
'Bruise',
'Cannon',
'Clink',
'Cobra',
'Colt',
'Crank',
'Creep',
'Daemon',
'Decay',
'Diablo',
'Doom',
'Dracula',
'Dragon',
'Fender',
'Fester',
'Fisheye',
'Flack',
'Gargoyle',
'Grave',
'Gunner',
'Hash',
'Hashtag',
'Indominus',
'Ironclad',
'Killer',
'Knuckles',
'Kraken',
'Lynch',
'Mad Dog',
'O\'Doyle',
'Psycho',
'Ranger',
'Ratchet',
'Reaper',
'Rigs',
'Ripley',
'Roadkill',
'Ronin',
'Rubble',
'Sasquatch',
'Scar',
'Shiver',
'Skinner',
'Skull Crusher',
'Slasher',
'Steelshot',
'Surge',
'Sythe',
'Trip',
'Trooper',
'Tweek',
'Vein',
'Void',
'Wardon',
'Wraith',
'Zero',
'Steel',
'Tito',
'Titanium',
'Iron-Cut',
'Steel Forge',
'Kevlar',
'Bullet-Proof',
'Hurricane',
'Tempest',
'Pursuit',
'Lightning',
'Fire-Bred',
'Ironsides',
'Iron Heart',
'Steel Foil',
'Upsurge',
'Breaker',
'Subversion',
'Uprising',
'Sabotage',
'Rebellion',
'Overthrow',
'Dissent',
'Insurgent',
'Loch',
'Rex',
'Balrog',
'Basilisk',
'Cerberus',
'Charybdis',
'Cyclops',
'Golem',
'Hydra',
'Manticore',
'Minotaur',
'Mothman',
'Orthros',
'Satyr',
'Wendigo',
'Behemoth',
'Gorgon',
'Leviathan',
'Sylla',
'Baal',
'Azrael',
'Ballistic',
'Fury',
'Wrath',
'Rage',
'Frenzy',
'Furor',
'Ire',
'Madness',
'Savage',
'Mania',
'Uproar',
'Demented',
'Schizo',
'Manic',
'Derange',
'V',
'Terminator',
'Siddhartha',
'Thor',
'Khan',
'Leonidas',
'Hannibal',
'Agrippa',
'Atilla',
'Conqueror',
'Suleiman',
'Napoleon',
'Geronimo',
'Dutch',
'Dux',
'Jesse James',
'Darko',
'Mad Max',
'Billy the Butcher',
'Maximus',
'Leon',
'Cyrus',
'Mr. Blonde',
'Matrix',
'Bleed',
'Nail',
'Fist',
'Tooth',
'K-9',
'Kneecap',
'Soleus',
'Blood',
'X-Skull',
'Jawbone',
'Skeleton',
'Craniax',
'Bone',
'Cut',
'Gash',
'Scab',
'Gut',
'Socket',
'Footslam',
'Head-Knocker',
'Razor',
'Slaughter',
'Scalp',
'Torque',
'Wracker',
'Wrecker',
'Clencher',
'Masher',
'Crusher',
'Slammer',
'Thrasher',
'Annihilator',
'Destroyer',
'Stabber',
'Hitter',
'Obliterator',
'Exterminator',
'Ruiner',
'Finisher',
'Overtaker',
'Saboteur',
'Rebel',
'Eliminator',
'Hell-Raiser',
'Mutant',
'Torpedo',
'Cannon',
'Mortar',
'Siege',
'Bullet',
'Aero',
'Albatross',
'Arsenal',
'Hornet',
'Wildcat',
'Hellcat',
'Tomcat',
'Panther',
'Jaguar',
'Bomber',
'Strike Eagle',
'Rimfire',
'Centerfire',
'Automatic',
'Glock',
'Sniper',
'Carbine',
'Javelin',
'Howitzer',
'Gatling',
'Avenger',
'Hazzard',
'Demolition',
'Chainsaw',
'Wrench',
'Power Train',
'Excavator',
'Shovel',
'Yarder',
'Trencher',
'Pile Driver',
'Terror',
'Freak',
'Axe',
'Axe-man',
'Executioner',
'Hollowman',
'Garrot',
'Abyss',
'Chasm',
'Ghoul',
'Demise',
'Grim',
'Menace',
'Dementor',
'Nightshade',
'Venom',
'The Unholy',
'Rot',
'Omen',
'Midnight',
'Phantom',
'Sepulcher',
'Damned',
'Kafka',
'Phantasm',
'Scream',
'Shriek',
'Wraith',
'Bodybag',
'Morgue',
'Mace',
'Battleaxe',
'Billhook',
'Caltrop',
'Longbow',
'Crossbow',
'Pike',
'Poleaxe',
'Quarterstaff',
'War Hammer',
'Spear',
'Katana',
'Saber',
'Broadsword',
'Claymore',
'Falchion',
'Zweihander',
'Club',
'Maul',
'Bludgeon',
'Lance',
'Tiger Claw',
'Brass Knuckle',
'Gauntlet',
'Katar',
'Dagger',
'Gladius',
'Cutlass',
'Scimitar',
'Espada',
'Montante',
'Hatchet',
'Hammer',
'Sledgehammer',
'Harpoon',
'Angon',
'Fire Lance',
'Matchlock',
'Bullwhip',
'Flying Claw',
'Slungshot',
'Aspis',
'Blade',
'Lockback',
'Machete',
'Grizzly',
'Snake',
'Vulture',
'Falcon',
'Ram',
'Boar',
'Tusk',
'Wolverine',
'Wolf',
'Claw',
'Fang',
'Grip',
'Black Mamba',
'Goshawk',
'Deathstalker',
'Scorpion',
'Boomslang',
'Viper',
'Sting',
'Lash',
'Gnaw',
'Aidyn',
'Akuji',
'Akuma',
'Alistair',
'Alucard',
'Arc',
'Ash',
'Banjo',
'Cave',
'Cloud',
'Crash',
'Cyrax',
'Dante',
'Daxter',
'Ding',
'Duke',
'Ermac',
'Ezio',
'Falco',
'Fox',
'Genji',
'Godot',
'Goemon',
'Goku',
'Goro',
'Hanzo',
'Hiro',
'Ico',
'Ike',
'Iori',
'Jago',
'Jak',
'Jax',
'Jedah',
'Jojo',
'Kage',
'Kain',
'Kane',
'Kanji',
'Kazooie',
'Kialos',
'Kirby',
'Klonoa',
'Link',
'Luigi',
'Majora',
'Maximo',
'Munch',
'Neo',
'Nero',
'Niko',
'Oro',
'Parappa',
'Phoenix',
'Rad',
'Raiden',
'Ridley',
'Rufus',
'Rygar',
'Ryu',
'Scorpion',
'Spyro',
'Squall',
'Tidus',
'Toan',
'Trevor',
'Valentine',
'Vyse',
'Wolf',
'Yoshi',
'Zell',
'Zidan',
'Ace',
'Adonis',
'Amor',
'Badboy',
'Bam Bam',
'Bear',
'Beast',
'Beef',
'Biggie',
'Boner',
'Boss',
'Cowboy',
'Daddy',
'Elmo',
'Gasoline',
'Gangster',
'Gizmo',
'Godzilla',
'Grandpa',
'Grasshopper',
'Handsome',
'Harvard',
'Hero',
'Hercules',
'Hollywood',
'Hoss',
'Hunk',
'Jedi',
'Macho',
'Mayhem',
'Motown',
'Monster',
'Moose',
'Muscle',
'Nemo',
'Pickle',
'Player',
'Poker',
'Pooh',
'Pops',
'Prince',
'Pup',
'Rockstar',
'Romeo',
'Scooter',
'Skipper',
'Sparkie',
'Superfly',
'Teddy',
'Tiger',
'Train',
'Turtle',
'Vegas',
'Waldo',
'Winner',
'"The" Daemon',
'Man',
'Boy',
'Iron Man'].map(text => text.trim().toLocaleLowerCase());
},{}],8:[function(require,module,exports){
module.exports = ['Aberr',
'Acid',
'Ada',
'Aeon',
'Aerith',
'Aeryn',
'Agitator',
'Agony',
'Alien',
'Alma',
'Alyx',
'Alyx',
'Amaretto',
'Amazon',
'Ambush',
'Animus',
'Anomoly',
'Aoi',
'Arbitrage',
'Arsenic',
'Arsenal',
'Artemis',
'Arya',
'Ashtart',
'Astaroth',
'Astor',
'Asuka',
'Atalanta',
'Athena',
'Athena',
'Atom',
'Atomic',
'Audacity',
'Ayame',
'Ayu',
'Babylon Candle',
'Bacardi',
'Baccarat',
'Bane',
'Banshee',
'Barbarian',
'Baroness',
'Bat',
'Bayonetta',
'Beguile',
'Belladonna',
'Bellagio',
'Belle Starr',
'Bellona',
'Beretta',
'Berserk',
'Beryllium',
'Big Time',
'Bitten',
'Black Beauty',
'Black Cat',
'Blackjack',
'Blaze',
'Bloodrayne',
'Bookie',
'Boudica',
'Brass',
'Breach',
'Brigitte',
'Buffy',
'Calamity Jane',
'Calypso',
'Cammy',
'Caprice',
'Carbon',
'Cascade',
'Cassie',
'Catch-22',
'Cate',
'Catwoman',
'Chai',
'Charade',
'Chicanery',
'Chloe',
'Chromium',
'Clementine',
'Cleo',
'Coffy',
'Cognac',
'Colada',
'Colestah',
'Comet',
'Cortana',
'Corybantic',
'Cosma',
'Cougar',
'Countess',
'Coyote',
'Crafty',
'Crazed',
'Crimson',
'Croft',
'Crow',
'Crucible',
'Curio',
'Cyanide',
'Dagger',
'Daisy',
'Daphne',
'Daredevil',
'Dark Matter',
'Daydream',
'Dazzler',
'Deceit',
'Deception',
'Deep Pockets',
'Delirious',
'Delusion',
'Devi',
'Deviant',
'Dice',
'Die-hard',
'Dihya',
'Dismay',
'Dom',
'Don',
'Double Double',
'Duchess',
'Earth Metal',
'Egomania',
'Electron',
'Elektra',
'Element',
'Elemental',
'Elena',
'Elexis',
'Empress',
'Enchantress',
'Enigma',
'Enmity',
'Entropy',
'Enyo',
'Eon',
'Eowyn',
'Epona',
'Eternity',
'Etna',
'Eva',
'Explosive',
'Fanatic',
'Fate',
'Feint',
'Felicia',
'Femme Fatale',
'Figment',
'Firebringer',
'Firecracker',
'Fishnet',
'Forever',
'Fox',
'Franziska',
'Fright',
'Geisha',
'Goddess',
'Grenade',
'Grudge',
'Gunpowder',
'Half Pint',
'Harlem',
'Haunter',
'Hauteur',
'Hawkeye',
'Helena',
'Helium',
'Hemlock',
'Hero',
'Heroin',
'Herzogin',
'High Roller',
'Hildegard',
'Horror',
'Hostility',
'Hot Salt',
'Hua Mulan',
'Hypernova',
'Illumine',
'Illusion',
'Immortal',
'Imoen',
'Inferno',
'Infinity',
'Insomnia',
'Ion',
'Irons',
'Ishtar',
'Isis',
'Ivy',
'Ivy',
'Jade',
'Jaheira',
'Joose',
'Jubilee',
'Juno',
'Juri',
'Kahina',
'Kairi',
'Kasumi',
'Kat',
'Katniss',
'Keno',
'Kiddo',
'Kitana',
'Kula',
'Lab Rat',
'Lara',
'Leeloo',
'Legacy',
'Lili',
'Linh',
'Lithium',
'Lock',
'Lolita',
'Lotus',
'Lucina',
'M-80',
'Madam',
'Mademoiselle',
'Majesty',
'Maki',
'Malevolence',
'Malice',
'Maniac',
'Mannequin',
'Marquess',
'Mathilda',
'Medb',
'Medium',
'Medusa',
'Mei',
'Mercenary',
'Mercury',
'Mercury',
'Mercy',
'Meteor',
'Mileena',
'Militant',
'Millia',
'Minx',
'Mirage',
'Miss Fortune',
'Missile',
'Mojave',
'Morrigan',
'Mortal',
'Mortar',
'Myth',
'Narcissus',
'Navi',
'Nefertiti',
'Neon',
'Nerve',
'Nevada',
'Night Terror',
'Nightmare',
'Nightshade',
'Nilin',
'Noir',
'Nova',
'Nuclear',
'Oleander',
'Orb',
'Osmium',
'Padme',
'Pai',
'Paine',
'Panic',
'Paramour',
'Peach',
'Pearl Heart',
'Phobia',
'Phosphorescent',
'Phosphorus',
'Photon',
'Pocket Rocket',
'Poison',
'Poker',
'Polgara',
'Predator',
'Prodigy',
'Protostar',
'Pumps',
'Puzzler',
'Pyro',
'Quistis',
'Rabid',
'Radiate',
'Radical',
'Radioactive',
'Radium',
'Radon',
'Ramona',
'Rancor',
'Raven',
'Rayne',
'Real Deal',
'Red Dog',
'Redox',
'Redux',
'Regina',
'Reiko',
'Reno',
'Resin',
'Revolution',
'Rikku',
'Rinoa',
'Riveter',
'Rocks',
'Rogue',
'Roman Candle',
'Rosalina',
'Roulette',
'Running Eagle',
'Rynn',
'Sakura',
'Samus',
'Satyr',
'Scheme',
'Scotch',
'Sekhmet',
'Selenium',
'Selkie',
'Selphie',
'Serpent',
'Sever',
'Shadow',
'Shantae',
'Sheva',
'Shieldmaiden',
'Shion',
'Shodan',
'Silk Spectre',
'Sindel',
'Siren',
'Smoke Bomb',
'Snake Eyes',
'Sophitia',
'Sora',
'Spider',
'Spite',
'Spitefulness',
'Steppe',
'Stiletto',
'Storm',
'Stratosphere',
'Supernova',
'Swagger',
'T-Back',
'Taki',
'Tanit',
'Tank',
'Tattoo',
'Temperance',
'Tequila',
'Terror',
'Teuta',
'The House',
'The Money',
'Thunderbird',
'Tifa',
'Torchy',
'Toxin',
'Trick',
'Trinity',
'Two Face',
'Ultra',
'Unstoppable',
'Vainglory',
'Valkyrie',
'Vanity',
'Vapor',
'Variance',
'Variant',
'Vegas',
'Velvet',
'Venom',
'Venus',
'Vex',
'Vile',
'Villain',
'Virtual',
'Virus',
'Vixen',
'Volt',
'Voodoo',
'Voyager',
'Wanderer',
'Watchface',
'Waylay',
'Whiskey',
'White Tights',
'Wicked',
'Widow',
'X-hibit',
'X-Ray',
'X-Treme',
'Xenon',
'Xenon',
'Ygritte',
'Yuna',
'Yuri',
'Zealot',
'Zelda',
'Zen',
'Zinc',
'Zoe',
'Angel',
'Babe',
'Babycakes',
'Bambi',
'Barbie',
'Beautiful',
'Bella',
'Betty Boo',
'Cookie',
'Critter',
'Cupcake',
'Cuteness',
'Darling',
'Dear',
'Dimples',
'Flame',
'Gaga',
'Giggles',
'Gorgeous',
'Hotlips',
'Jellybean',
'Juliet',
'Kitten',
'Loca',
'Momacita',
'Meow',
'Minnie',
'Missy',
'Mouse',
'Mooncake',
'Muffin',
'Munchkin',
'Pancake',
'Peaches',
'Peanut',
'Pebbles',
'Pet',
'Pookie',
'Pop Tart',
'Precious',
'Princess',
'Pumpkin',
'Skittles',
'Smiles',
'Snowflake',
'Squirrel',
'Sugar',
'Sunshine',
'Sushi',
'Tart',
'Tinkerbell',
'Tootsie',
'Tweety',
'Twinkle',
'Yummy',
'Girl',
'Woman'].map(text => text.trim().toLocaleLowerCase());
},{}],9:[function(require,module,exports){
module.exports=["The Armor",
 "Anomaly",
 "Trink",
 "Twitch",
 "Username",
 "Critical",
 "Digital",
 "Virtual",
 "Opportunity",
 "Chief",
 "Officer",
 "Destiny",
 "Identity",
 "Atalante",
 "Blaser",
 "Camden",
 "Patriot",
 "Fury",
 "Fire"].map(text => text.trim().toLocaleLowerCase());
},{}],10:[function(require,module,exports){
/**
 * @file A fantasy name generator library.
 * @version 1.0.0
 * @license Public Domain
 *
 * This library is designed after the RinkWorks Fantasy Name Generator.
 * @see http://www.rinkworks.com/namegen/
 *
 * @example
 * var generator = NameGen.compile("sV'i");
 * generator.toString();  // Emits a new name on each call
 * // => "entheu'loaf"
 *
 * ## Pattern Syntax
 *
 *   The compile() function creates a name generator based on an input
 * pattern. The letters s, v, V, c, B, C, i, m, M, D, and d represent
 * different types of random replacements. Everything else is emitted
 * literally.
 *
 *   s - generic syllable
 *   v - vowel
 *   V - vowel or vowel combination
 *   c - consonant
 *   B - consonant or consonant combination suitable for beginning a word
 *   C - consonant or consonant combination suitable anywhere in a word
 *   i - insult
 *   m - mushy name
 *   M - mushy name ending
 *   D - consonant suited for a stupid person's name
 *   d - syllable suited for a stupid person's name (begins with a vowel)
 *
 *   All characters between parenthesis () are emitted literally. For
 * example, the pattern "s(dim)", emits a random generic syllable
 * followed by "dim".
 *
 *   Characters between angle brackets <> emit patterns from the table
 * above. Imagine the entire pattern is wrapped in one of these.
 *
 *   In both types of groupings, a vertical bar | denotes a random
 * choice. Empty groups are allowed. For example, "(foo|bar)" emits
 * either "foo" or "bar". The pattern "<c|v|>" emits a constant,
 * vowel, or nothing at all.
 *
 *   An exclamation point ! means to capitalize the component that
 * follows it. For example, "!(foo)" will emit "Foo" and "v!s" will
 * emit a lowercase vowel followed by a capitalized syllable, like
 * "eRod".
 *
 *   A tilde ~ means to reverse the letters of the component that
 * follows it. For example, "~(foo)" will emit "oof". To reverse an
 * entire template, wrap it in brackets. For example, to reverse
 * "sV'i" as a whole use "~<sV'i>". The template "~sV'i" will only
 * reverse the initial syllable.
 *
 * ## Internals
 *
 *   A name generator is anything with a toString() method, including,
 * importantly, strings themselves. The generator constructors
 * (Random, Sequence) perform additional optimizations when *not* used
 * with the `new` keyword: they may pass through a provided generator,
 * combine provided generators, or even return a simple string.
 *
 *   New pattern symbols added to NameGen.symbols will automatically
 * be used by the compiler.
 */

/**
 * Number of generated output possibilities (generator function).
 * @returns {number}
 * @method
 */
String.prototype.combinations = function() { return 1; };

/**
 * Longest possible output length (generator function).
 * @returns {number}
 * @method
 */
String.prototype.min = function() { return this.length; };

/**
 * Shortest possible output length (generator function).
 * @returns {number}
 * @method
 */
String.prototype.max = function() { return this.length; };

/**
 * List all possible outputs (generator function).
 * @returns {Array} An array of output strings.
 * @method
 */
String.prototype.enumerate = function() { return [String(this)]; };

/**
 * @namespace NameGen Everything relevant to the name generators.
 */
var NameGen = NameGen || {};

/**
 * Strings generated by the symbol generators.
 */
NameGen.symbols = {
    s: ['ach', 'ack', 'ad', 'age', 'ald', 'ale', 'an', 'ang', 'ar', 'ard',
        'as', 'ash', 'at', 'ath', 'augh', 'aw', 'ban', 'bel', 'bur', 'cer',
        'cha', 'che', 'dan', 'dar', 'del', 'den', 'dra', 'dyn', 'ech', 'eld',
        'elm', 'em', 'en', 'end', 'eng', 'enth', 'er', 'ess', 'est', 'et',
        'gar', 'gha', 'hat', 'hin', 'hon', 'ia', 'ight', 'ild', 'im', 'ina',
        'ine', 'ing', 'ir', 'is', 'iss', 'it', 'kal', 'kel', 'kim', 'kin',
        'ler', 'lor', 'lye', 'mor', 'mos', 'nal', 'ny', 'nys', 'old', 'om',
        'on', 'or', 'orm', 'os', 'ough', 'per', 'pol', 'qua', 'que', 'rad',
        'rak', 'ran', 'ray', 'ril', 'ris', 'rod', 'roth', 'ryn', 'sam',
        'say', 'ser', 'shy', 'skel', 'sul', 'tai', 'tan', 'tas', 'ther',
        'tia', 'tin', 'ton', 'tor', 'tur', 'um', 'und', 'unt', 'urn', 'usk',
        'ust', 'ver', 'ves', 'vor', 'war', 'wor', 'yer'],
    v: ['a', 'e', 'i', 'o', 'u', 'y'],
    V: ['a', 'e', 'i', 'o', 'u', 'y', 'ae', 'ai', 'au', 'ay', 'ea', 'ee',
        'ei', 'eu', 'ey', 'ia', 'ie', 'oe', 'oi', 'oo', 'ou', 'ui'],
    c: ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r',
        's', 't', 'v', 'w', 'x', 'y', 'z'],
    B: ['b', 'bl', 'br', 'c', 'ch', 'chr', 'cl', 'cr', 'd', 'dr', 'f', 'g',
        'h', 'j', 'k', 'l', 'll', 'm', 'n', 'p', 'ph', 'qu', 'r', 'rh', 's',
        'sch', 'sh', 'sl', 'sm', 'sn', 'st', 'str', 'sw', 't', 'th', 'thr',
        'tr', 'v', 'w', 'wh', 'y', 'z', 'zh'],
    C: ['b', 'c', 'ch', 'ck', 'd', 'f', 'g', 'gh', 'h', 'k', 'l', 'ld', 'll',
        'lt', 'm', 'n', 'nd', 'nn', 'nt', 'p', 'ph', 'q', 'r', 'rd', 'rr',
        'rt', 's', 'sh', 'ss', 'st', 't', 'th', 'v', 'w', 'y', 'z'],
    i: ['air', 'ankle', 'ball', 'beef', 'bone', 'bum', 'bumble', 'bump',
        'cheese', 'clod', 'clot', 'clown', 'corn', 'dip', 'dolt', 'doof',
        'dork', 'dumb', 'face', 'finger', 'foot', 'fumble', 'goof',
        'grumble', 'head', 'knock', 'knocker', 'knuckle', 'loaf', 'lump',
        'lunk', 'meat', 'muck', 'munch', 'nit', 'numb', 'pin', 'puff',
        'skull', 'snark', 'sneeze', 'thimble', 'twerp', 'twit', 'wad',
        'wimp', 'wipe'],
    m: ['baby', 'booble', 'bunker', 'cuddle', 'cuddly', 'cutie', 'doodle',
        'foofie', 'gooble', 'honey', 'kissie', 'lover', 'lovey', 'moofie',
        'mooglie', 'moopie', 'moopsie', 'nookum', 'poochie', 'poof',
        'poofie', 'pookie', 'schmoopie', 'schnoogle', 'schnookie',
        'schnookum', 'smooch', 'smoochie', 'smoosh', 'snoogle', 'snoogy',
        'snookie', 'snookum', 'snuggy', 'sweetie', 'woogle', 'woogy',
        'wookie', 'wookum', 'wuddle', 'wuddly', 'wuggy', 'wunny'],
    M: ['boo', 'bunch', 'bunny', 'cake', 'cakes', 'cute', 'darling',
        'dumpling', 'dumplings', 'face', 'foof', 'goo', 'head', 'kin',
        'kins', 'lips', 'love', 'mush', 'pie', 'poo', 'pooh', 'pook', 'pums'],
    D: ['b', 'bl', 'br', 'cl', 'd', 'f', 'fl', 'fr', 'g', 'gh', 'gl', 'gr',
        'h', 'j', 'k', 'kl', 'm', 'n', 'p', 'th', 'w'],
    d: ['elch', 'idiot', 'ob', 'og', 'ok', 'olph', 'olt', 'omph', 'ong',
        'onk', 'oo', 'oob', 'oof', 'oog', 'ook', 'ooz', 'org', 'ork', 'orm',
        'oron', 'ub', 'uck', 'ug', 'ulf', 'ult', 'um', 'umb', 'ump', 'umph',
        'un', 'unb', 'ung', 'unk', 'unph', 'unt', 'uzz']
};

/**
 * Return true if the given thing is a string.
 * @param object - The object to be tested
 * @returns {boolean}
 * @private
 */
NameGen._isString = function(object) {
    return Object.prototype.toString.call(object) === '[object String]';
};

/**
 * Combine adjacent strings in the array.
 * @param {Array} array - The array to be compressed (unmodified)
 * @returns {Array} A new array with the strings compressed
 * @private
 */
NameGen._compress = function(array) {
    var emit = [], accum = [];
    function dump() {
        if (accum.length > 0) {
            emit.push(accum.join(''));
            accum.length = 0;
        }
    }
    for (var i = 0; i < array.length; i++) {
        if (NameGen._isString(array[i])) {
            accum.push(array[i]);
        } else {
            dump();
            emit.push(array[i]);
        }
    }
    dump();
    return emit;
};

/**
 * @param {string} string
 * @returns {string}
 */
NameGen._capitalize = function(string) {
    return string.replace(/^./, function(c) {
        return c.toUpperCase();
    });
};

/**
 * @param {string} string
 * @returns {string}
 */
NameGen._reverse = function(string) {
    return string.split(/(?:)/).reverse().join('');
};

/**
 * When emitting, selects a random generator.
 * @param {Array} generators - An array of name generators
 * @returns A name generator, not necessarily a new one
 * @constructor
 */
NameGen.Random = function Random(generators) {
    if (!(this instanceof NameGen.Random)) {
        switch (generators.length) {
        case 0:
            return '';
        case 1:
            return generators[0];
        default:
            return new NameGen.Random(generators);
        }
    }
    this.sub = generators;
    return this;
};

/**
 * Generate a new name.
 * @returns {string}
 * @method
 */
NameGen.Random.prototype.toString = function() {
    if (this.sub.length > 0) {
        var i = Math.floor(Math.random() * this.sub.length);
        return this.sub[i].toString();
    } else {
        return '';
    }
};

/**
 * Number of generated output possibilities (generator function).
 * @returns {number}
 * @method
 */
NameGen.Random.prototype.combinations = function() {
    return Math.max(1, this.sub.reduce(function(total, g) {
        return total + g.combinations();
    }, 0));
};

/**
 * Shortest possible output length (generator function).
 * @returns {number}
 * @method
 */
NameGen.Random.prototype.min = function() {
    return Math.min.apply(null, this.sub.map(function(g) {
        return g.min();
    }));
};

/**
 * Longest possible output length (generator function).
 * @returns {number}
 * @method
 */
NameGen.Random.prototype.max = function() {
    return Math.max.apply(null, this.sub.map(function(g) {
        return g.max();
    }));
};

/**
 * Enumerate all possible outputs.
 * @returns {Array} An array of all possible outputs.
 * @method
 */
NameGen.Random.prototype.enumerate = function() {
    var enums = this.sub.map(function(g) { return g.enumerate(); });
    return Array.prototype.concat.apply(enums[0], enums.slice(1));
};

/**
 * Runs each provided generator in turn when generating.
 * @param {Array} generators - An array of name generators
 * @returns A name generator, not necessarily a new one
 * @constructor
 */
NameGen.Sequence = function Sequence(generators) {
    generators = NameGen._compress(generators);
    if (!(this instanceof NameGen.Sequence)) {
        switch (generators.length) {
        case 0:
            return '';
        case 1:
            return generators[0];
        default:
            return new NameGen.Sequence(generators);
        }
    }
    this.sub = generators;
    return this;
};

/**
 * Generate a new name.
 * @returns {string}
 * @method
 */
NameGen.Sequence.prototype.toString = function() {
    return this.sub.join('');
};

/**
 * Number of generated output possibilities (generator function).
 * @returns {number}
 * @method
 */
NameGen.Sequence.prototype.combinations = function() {
    return this.sub.reduce(function(total, g) {
        return total * g.combinations();
    }, 1);
};

/**
 * Shortest possible output length (generator function).
 * @returns {number}
 * @method
 */
NameGen.Sequence.prototype.min = function() {
    return this.sub.reduce(function(total, g) {
        return total + g.min();
    }, 0);
};

/**
 * Longest possible output length (generator function).
 * @returns {number}
 * @method
 */
NameGen.Sequence.prototype.max = function() {
    return this.sub.reduce(function(total, g) {
        return total + g.max();
    }, 0);
};

/**
 * Enumerate all possible outputs.
 * @returns {Array} An array of all possible outputs.
 * @method
 */
NameGen.Sequence.prototype.enumerate = function() {
    var enums = this.sub.map(function(g) { return g.enumerate(); });
    function enumerate(enums, prefix) {
        if (enums.length === 1) {
            return enums[0].map(function(e) {
                return prefix + e;
            });
        } else {
            var output = [];
            var rest = enums.slice(1);
            for (var i = 0; i < enums[0].length; i++) {
                output.push(enumerate(rest, prefix + enums[0][i]));
            }
            return Array.prototype.concat.apply([], output);
        }
    }
    return enumerate(enums, '');
};

/**
 * Create a new type of generator based on a string transform function.
 * @param {Function} f
 */
NameGen.fromTransform = function(f) {
    function G(generator) {
        if (!(this instanceof G)) {
            if (NameGen._isString(generator)) {
                return f(generator);
            } else {
                return new G(generator);
            }
        }
        this.generator = generator;
        return this;
    }

    G.prototype.toString = function() {
        return f(this.generator.toString());
    };
    G.prototype.combinations = function() {
        return this.generator.combinations();
    };
    G.prototype.min = function() {
        return this.generator.min();
    };
    G.prototype.max = function() {
        return this.generator.max();
    };
    G.prototype.enumerate = function() {
        return this.generator.enumerate().map(f);
    };

    return G;
};

/**
 * Decorate a generator by capitalizing its output.
 * @constructor
 */
NameGen.Capitalizer = NameGen.fromTransform(NameGen._capitalize);

/**
 * Decorate a generator by reversing its output.
 * @constructor
 */
NameGen.Reverser = NameGen.fromTransform(NameGen._reverse);

/* Everything below here is the compiler. */

/**
 * Builds up a generator grouping in the compiler.
 * @constructor
 */
NameGen._Group = function() {
    this.set = [[]];
    this.wrappers = [];
};

/**
 * @param g The generator to add to this group
 * @returns This object
 */
NameGen._Group.prototype.add = function(g) {
    while (this.wrappers.length > 0) {
        var type = this.wrappers.pop();
        g = type(g);
    }
    this.set[this.set.length - 1].push(g);
    return this;
};

/**
 * Start a new grouping in this generator group.
 * @returns This object
 */
NameGen._Group.prototype.split = function() {
    this.set.push([]);
    return this;
};

/**
 * Wrap the next added generator with this decorator.
 * @param type The type of the decorator to wrap.
 * @returns This object
 */
NameGen._Group.prototype.wrap = function(type) {
    this.wrappers.push(type);
    return this;
};

/**
 * @returns A generator built from this grouping.
 */
NameGen._Group.prototype.emit = function() {
    return NameGen.Random(this.set.map(NameGen.Sequence));
};

/**
 * Builds up a literal grouping in the compiler.
 * @constructor
 */
NameGen._Literal = function() {
    NameGen._Group.call(this);
};
NameGen._Literal.prototype = Object.create(NameGen._Group.prototype);

/**
 * Builds up a symbolic grouping in the compiler.
 * @constructor
 */
NameGen._Symbol = function() {
    NameGen._Group.call(this);
};
NameGen._Symbol.prototype = Object.create(NameGen._Group.prototype);

/**
 * Add a new generator based on a character.
 * @param c The generator's symbol
 * @returns This object
 */
NameGen._Symbol.prototype.add = function(g, literal) {
    if (!literal) {
        g = NameGen.Random(NameGen.symbols[g] || [g]);
    }
    NameGen._Group.prototype.add.call(this, g);
    return this;
};

/**
 * Compile a generator specification string into a generator.
 * @param {string} input - The pattern string to compile
 * @returns A name generator
 */
NameGen.compile = function(input) {
    var stack = [];
    stack.top = function() {
        return stack[stack.length - 1];
    };

    stack.push(new NameGen._Symbol());
    for (var i = 0; i < input.length; i++) {
        var c = input[i];
        switch (c) {
        case '<':
            stack.push(new NameGen._Symbol());
            break;
        case '(':
            stack.push(new NameGen._Literal());
            break;
        case '>':
        case ')':
            if (stack.length === 1) {
                throw new Error('Unbalanced brackets.');
            } else if (c === '>' && stack.top() instanceof NameGen._Literal) {
                throw new Error('Unexpected ">" in input.');
            } else if (c === ')' && stack.top() instanceof NameGen._Symbol) {
                throw new Error('Unexpected ")" in input.');
            }
            var last = stack.pop().emit();
            stack.top().add(last, true);
            break;
        case '|':
            stack.top().split();
            break;
        case '!':
            if (stack.top() instanceof NameGen._Symbol) {
                stack.top().wrap(NameGen.Capitalizer);
            } else {
                stack.top().add(c);
            }
            break;
        case '~':
            if (stack.top() instanceof NameGen._Symbol) {
                stack.top().wrap(NameGen.Reverser);
            } else {
                stack.top().add(c);
            }
            break;
        default:
            stack.top().add(c);
            break;
        }
    }
    if (stack.length !== 1) {
        throw new Error('Missing closing bracket.');
    } else {
        return stack.top().emit();
    }
};

module.exports = NameGen;
},{}]},{},[2]);
