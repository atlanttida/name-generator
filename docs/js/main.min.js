(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
const numBackgrounds = 13;
function getRandomInt(max) {
    return Math.floor(Math.random() * Math.floor(max));
}
document.body.className += " bg-image-"+(getRandomInt(numBackgrounds)+1);

function changeBg(){
    document.body.className = document.body.className.replace(/bg-image-\d+/,"bg-image-"+(getRandomInt(numBackgrounds)+1))
}

module.exports={changeBg}
},{}],2:[function(require,module,exports){
const NameGen = require('../lib/namegen.js');
require('../lib/extend-namegen');
const BgSwitcher = require("./background-switcher");

const maxNames = 5;
var generator = NameGen.compile(/*"G The P k Q"*/
            //"The P Q"
            window.GENERATOR_PATTERN?htmlDecode(window.GENERATOR_PATTERN):"G The P"

);
var output = document.querySelector(".output");

// document.querySelector("input[name=pattern]").oninput=document.querySelector("input[name=pattern]").onchange = (e) => {
//     generator = NameGen.compile(e.target.value);
// }
if (document.querySelector("button[name=go]")){
    document.querySelector("button[name=go]").onclick = () =>{

        document.querySelector(".usr").style.display="none";

        //show ads
        document.querySelectorAll(".google-ad").forEach(el =>el.classList.remove("d-none"));
        output.innerHTML = "";
        BgSwitcher.changeBg();
        for (var i=0;i<maxNames;i++){
            var p = document.createElement("p");
            var generatedName = generator.toString().capitalize();
            p.innerHTML = '<button class="btn btn-outline-light btn-lg"> '+generatedName + ' | <i class="bi bi-clipboard-check"></i> Copy</button>';
            var btn = output.appendChild(p).firstChild;
            btn["data-txt"] = generatedName;
            btn.onclick = copyToClipboard;
        }
    }
}


function copyToClipboard(e) {
    /* Get the text field */
    var input = document.createElement("textarea");
    input.style.style = {position: 'absolute', left: '-9999px'};
    input.value = e.target["data-txt"];
    document.body.appendChild(input);
    /* Select the text field */
    input.select();
    input.setSelectionRange(0, 99999); /* For mobile devices */
  
    /* Copy the text inside the text field */
    document.execCommand("copy");
  
    /* Alert the copied text */
    // alert("Copied the text: " + input.value);
    input.parentElement.removeChild(input);
  }

  String.prototype.capitalize = function() {
    return this.replace(/(^\w{1})|(\s+\w{1})/g, letter => letter.toUpperCase());
  }

function htmlDecode(input){
  var e = document.createElement('textarea');
  e.innerHTML = input;
  // handle case of empty input
  return e.childNodes.length === 0 ? "" : e.childNodes[0].nodeValue;
}
},{"../lib/extend-namegen":6,"../lib/namegen.js":13,"./background-switcher":1}],3:[function(require,module,exports){
const ADJECTIVES = [
'Supreme',
'Amazing',
'Incredible',
'Fancy',
'Cute',
'Bossy',
'Crazy',
'Jumping',
'Shy',
'Smart ',
'Wealthy',
'Sad',
'Excited',
'Brave',
'Hyper',
'Honest',
'Macho',
'Flirty',
'Friendly',
'Sensible',
'Spoiled',
'Cheerful',
'Sweet',
'Prickly',
'Defiant',
'Empty',
'Timid',
'Sporty',
'Sunny',
'Bully',
'Cruel',
'Exotic',
'Playful',
'Strong',
'Lovely',
'Deadly',
'Sleepy',
'Majestic',
'Crafty',
'Graceful',
'Boring',
'Sarcastic',
'Lazy',
'Bright',
'Sassy',
'Bold',
'Wild',
'Angry',
'Big',
'Small',
'Tiny',
'Grumpy',
'Muddy',
'Clumsy',
'Odd',
'Lonely',
'Hungry',
'Dizzy',
'Long',
'Mini',
'Short',
'Slow',
'Rapid',
'Quick ',
'Handsome',
'Young',
'Fast',
'Ancient',
'Annoying',
'Aggressive',
'Adventurous',
'Sparkling',
'Precious',
'Defiant',
'Confused',
'Fabulous',
'Fearless',
'Invincible',
'Evil',
'Red',
'Dark',
'Red',
'Silver',
'Barbarian',
'Iron ',
'Steel',
'Blue',
'Mean',
'Rude',
'Cold',
'Geek'
].map(text => text.trim().toLocaleLowerCase());


module.exports = ADJECTIVES;

},{}],4:[function(require,module,exports){
module.exports = [
    "Aardvark",
    "Albatross",
    "Alligator",
    "Alpaca",
    "Ant",
    "Anteater",
    "Antelope",
    "Ape",
    "Armadillo",
    "Donkey",
    "Baboon",
    "Badger",
    "Barracuda",
    "Bat",
    "Bear",
    "Beaver",
    "Bee",
    "Bison",
    "Boar",
    "Buffalo",
    "Butterfly",
    "Camel",
    "Capybara",
    "Caribou",
    "Cassowary",
    "Cat",
    "Caterpillar",
    "Cattle",
    "Chamois",
    "Cheetah",
    "Chicken",
    "Chimpanzee",
    "Chinchilla",
    "Chough",
    "Clam",
    "Cobra",
    "Cockroach",
    "Cod",
    "Cormorant",
    "Coyote",
    "Crab",
    "Crane",
    "Crocodile",
    "Crow",
    "Curlew",
    "Deer",
    "Dinosaur",
    "Dog",
    "Dogfish",
    "Dolphin",
    "Dotterel",
    "Dove",
    "Dragonfly",
    "Duck",
    "Dugong",
    "Dunlin",
    "Eagle",
    "Echidna",
    "Eel",
    "Eland",
    "Elephant",
    "Elk",
    "Emu",
    "Falcon",
    "Ferret",
    "Finch",
    "Fish",
    "Flamingo",
    "Fly",
    "Fox",
    "Frog",
    "Gaur",
    "Gazelle",
    "Gerbil",
    "Giraffe",
    "Gnat",
    "Gnu",
    "Goat",
    "Goldfinch",
    "Goldfish",
    "Goose",
    "Gorilla",
    "Goshawk",
    "Grasshopper",
    "Grouse",
    "Guanaco",
    "Gull",
    "Hamster",
    "Hare",
    "Hawk",
    "Hedgehog",
    "Heron",
    "Herring",
    "Hippopotamus",
    "Hornet",
    "Horse",
    "Human",
    "Hummingbird",
    "Hyena",
    "Ibex",
    "Ibis",
    "Jackal",
    "Jaguar",
    "Jay",
    "Jellyfish",
    "Kangaroo",
    "Kingfisher",
    "Koala",
    "Kookabura",
    "Kouprey",
    "Kudu",
    "Lapwing",
    "Lark",
    "Lemur",
    "Leopard",
    "Lion",
    "Llama",
    "Lobster",
    "Locust",
    "Loris",
    "Louse",
    "Lyrebird",
    "Magpie",
    "Mallard",
    "Manatee",
    "Mandrill",
    "Mantis",
    "Marten",
    "Meerkat",
    "Mink",
    "Mole",
    "Mongoose",
    "Monkey",
    "Moose",
    "Mosquito",
    "Mouse",
    "Mule",
    "Narwhal",
    "Newt",
    "Nightingale",
    "Octopus",
    "Okapi",
    "Opossum",
    "Oryx",
    "Ostrich",
    "Otter",
    "Owl",
    "Oyster",
    "Panther",
    "Parrot",
    "Partridge",
    "Peafowl",
    "Pelican",
    "Penguin",
    "Pheasant",
    "Pig",
    "Pigeon",
    "Pony",
    "Porcupine",
    "Porpoise",
    "Quail",
    "Quelea",
    "Quetzal",
    "Rabbit",
    "Raccoon",
    "Rail",
    "Ram",
    "Rat",
    "Raven",
    "Red deer",
    "Red panda",
    "Reindeer",
    "Rhinoceros",
    "Rook",
    "Salamander",
    "Salmon",
    "Sand Dollar",
    "Sandpiper",
    "Sardine",
    "Scorpion",
    "Seahorse",
    "Seal",
    "Shark",
    "Sheep",
    "Shrew",
    "Skunk",
    "Snail",
    "Snake",
    "Sparrow",
    "Spider",
    "Spoonbill",
    "Squid",
    "Squirrel",
    "Starling",
    "Stingray",
    "Stinkbug",
    "Stork",
    "Swallow",
    "Swan",
    "Tapir",
    "Tarsier",
    "Termite",
    "Tiger",
    "Toad",
    "Trout",
    "Turkey",
    "Turtle",
    "Viper",
    "Vulture",
    "Wallaby",
    "Walrus",
    "Wasp",
    "Weasel",
    "Whale",
    "Wildcat",
    "Wolf",
    "Wolverine",
    "Wombat",
    "Woodcock",
    "Woodpecker",
    "Worm",
    "Wren",
    "Yak",
    "Zebra"
].map(text => text.trim().toLocaleLowerCase());
},{}],5:[function(require,module,exports){
const CSS_COLORS = [
    "AliceBlue",
    "AntiqueWhite",
    "Aqua",
    "Aquamarine",
    "Azure",
    "Beige",
    "Bisque",
    "Black",
    "BlanchedAlmond",
    "Blue",
    "BlueViolet",
    "Brown",
    "BurlyWood",
    "CadetBlue",
    "Chartreuse",
    "Chocolate",
    "Coral",
    "CornflowerBlue",
    "Cornsilk",
    "Crimson",
    "Cyan",
    "DarkBlue",
    "DarkCyan",
    "DarkGoldenRod",
    "DarkGray",
    "DarkGrey",
    "DarkGreen",
    "DarkKhaki",
    "DarkMagenta",
    "DarkOliveGreen",
    "DarkOrange",
    "DarkOrchid",
    "DarkRed",
    "DarkSalmon",
    "DarkSeaGreen",
    "DarkSlateBlue",
    "DarkSlateGray",
    "DarkSlateGrey",
    "DarkTurquoise",
    "DarkViolet",
    "DeepPink",
    "DeepSkyBlue",
    "DimGray",
    "DimGrey",
    "DodgerBlue",
    "FireBrick",
    "FloralWhite",
    "ForestGreen",
    "Fuchsia",
    "Gainsboro",
    "GhostWhite",
    "Gold",
    "GoldenRod",
    "Gray",
    "Grey",
    "Green",
    "GreenYellow",
    "HoneyDew",
    "HotPink",
    "IndianRed",
    "Indigo",
    "Ivory",
    "Khaki",
    "Lavender",
    "LavenderBlush",
    "LawnGreen",
    "LemonChiffon",
    "LightBlue",
    "LightCoral",
    "LightCyan",
    "LightGoldenRodYellow",
    "LightGray",
    "LightGrey",
    "LightGreen",
    "LightPink",
    "LightSalmon",
    "LightSeaGreen",
    "LightSkyBlue",
    "LightSlateGray",
    "LightSlateGrey",
    "LightSteelBlue",
    "LightYellow",
    "Lime",
    "LimeGreen",
    "Linen",
    "Magenta",
    "Maroon",
    "MediumAquaMarine",
    "MediumBlue",
    "MediumOrchid",
    "MediumPurple",
    "MediumSeaGreen",
    "MediumSlateBlue",
    "MediumSpringGreen",
    "MediumTurquoise",
    "MediumVioletRed",
    "MidnightBlue",
    "MintCream",
    "MistyRose",
    "Moccasin",
    "NavajoWhite",
    "Navy",
    "OldLace",
    "Olive",
    "OliveDrab",
    "Orange",
    "OrangeRed",
    "Orchid",
    "PaleGoldenRod",
    "PaleGreen",
    "PaleTurquoise",
    "PaleVioletRed",
    "PapayaWhip",
    "PeachPuff",
    "Peru",
    "Pink",
    "Plum",
    "PowderBlue",
    "Purple",
    "RebeccaPurple",
    "Red",
    "RosyBrown",
    "RoyalBlue",
    "SaddleBrown",
    "Salmon",
    "SandyBrown",
    "SeaGreen",
    "SeaShell",
    "Sienna",
    "Silver",
    "SkyBlue",
    "SlateBlue",
    "SlateGray",
    "SlateGrey",
    "Snow",
    "SpringGreen",
    "SteelBlue",
    "Tan",
    "Teal",
    "Thistle",
    "Tomato",
    "Turquoise",
    "Violet",
    "Wheat",
    "White",
    "WhiteSmoke",
    "Yellow",
    "YellowGreen",
  ].map(text => text.replace( /([A-Z])/g, " $1" ).trim().toLocaleLowerCase()).filter(text => text.indexOf(" ")<0);

  module.exports = CSS_COLORS;
},{}],6:[function(require,module,exports){
const NameGen = require("./namegen");
//s, v, V, c, B, C, i, m, M, D, and d
Object.assign(NameGen.symbols,{
    k:require("./css-colors"),
    P:require("./adjectives"),
    Q:require("./animals"),
    G:require("./gamer-girl-names"),
    x:require("./gamer-girl-name-presets"),
    b:require("./gamer-boy-names"),
    y:require("./gamer-boy-name-presets"),
    j:require("./gamer-boy-name-japanese-presets"),
    n:require("./gamer-neutral-names"),
});

module.exports ={}
},{"./adjectives":3,"./animals":4,"./css-colors":5,"./gamer-boy-name-japanese-presets":7,"./gamer-boy-name-presets":8,"./gamer-boy-names":9,"./gamer-girl-name-presets":10,"./gamer-girl-names":11,"./gamer-neutral-names":12,"./namegen":13}],7:[function(require,module,exports){
module.exports=[
'about 5 ninjas',
'Asasinsensation',
'ninja typhoOon',
'ScaryNinja',
'NinjaHype',
'Shuriken',
'NinjaStar',
'EnterTheNinja',
'EnterTheDragon',
'Metsubishi',
'Pandas',
'OpaqueNinja',
'Manriki-gusari',
'NinjaMan',
'NinjaDude',
'Silent assassin',
'Kunai',
'Ninjah',
'TwoKatanas',
'KatanaIfyawanna',
'KantanaSlice',
'KantanaOnToast',
'Precursorninja',
'NinjaSkills',
'Skillslikeaninja',
'NinjaOnFire',
'Fukiya',
'Ninja Maneuver',
'Ninjamoves',
'Ninja Pwnage',
'Neko Te',
'NekoTeGirl',
'NekoTeClaws',
'NinjaWithWings',
'TMNT',
'Shredder',
'Justturtles',
'Kakute',
'NinjaSchool',
'NowYouSeeMe',
'Kusarigama',
'Wayofthewarrior',
'Callmesensei',
'Samureye',
'SamuraiJack',
'ShadowFriend',
'ShadowFiend',
'CrouchingTiger',
'Whatisninja',
'Ninjutsu'
]
},{}],8:[function(require,module,exports){
module.exports = [
'EatBullets',
'PR0_GGRAM3D',
'CollateralDamage',
'TheSickness',
'Shoot2Kill',
'Overkill',
'Killspree',
'MindlessKilling',
'Born2Kill',
'TheZodiac',
'ZodiacKiller',
'Osamaisback',
'OsamasGhost',
'T3rr0r1st',
'ToySoldier',
'MilitaryMan',
'DeathSquad',
'Veteranofdeath',
'Angelofdeath',
'Ebola',
'MustardGas',
'Knuckles',
'KnuckleBreaker',
'KnuckleDuster',
'BloodyKnuckles',
'JackTheRipper',
'TedBundyHandsome',
'Necromancer',
'SmilingSadist',
'ManicLaughter',
'Tearsofjoy',
'ShowMeUrguts',
'KnifeInGutsOut',
'Talklesswinmore',
'Guillotine',
'Decapitator',
'TheExecutor',
'BigKnives',
'SharpKnives',
'LocalBackStabber',
'BodyParts',
'BodySnatcher',
'TheButcher',
'meat cleaver',
'ChopChop',
'ChopSuey',
'TheZealot',
'VagaBond',
'LoneAssailant',
'9mm',
'SemiAutomatic',
'101WaysToMeetYourMaker',
'SayHi2God',
'Welcome2Hell',
'HellNBack',
'Dudemister',
'MiseryInducing',
'SmashDtrash',
'TakinOutThaTrash',
'StreetSweeper',
'TheBully',
'Getoutofmyway',
'NoMercy4TheWeak',
'Sl4ught3r',
'HappyKilling',
'HappyPurgeDay',
'HappyPurging',
'RiotStarter',
'CantStop',
'CantStopWontstop',
'SweetPoison',
'SimplyTheBest',
'PuppyDrowner',
'EatYourHeartOut',
'RipYourHeartOut',
'BloodDrainer',
'AcidAttack',
'AcidFace',
'PetrolBomb',
'Molotov',
'TequilaSunrise',
'TeKillaSunrise',
'LocalGrimReaper',
'SoulTaker',
'DreamHaunter',
'Grave Digger',
'YSoSerious',
'Revenge',
'Avenged',
'BestServedCold',
'HitNRUN',
'Fastandfurious',
'MrBlond',
'TheKingIsDead',
'TheNihilist',
'Bad2TheBone',
'OneShot',
'SmokinAces',
'DownInSmoke',
'NoFun4U',
'Type2Diabetes',
'Yellow Snowman',
'FartinLutherKing',
'I have a large sock',
'Milf n cookies',
'WestboroFaptist',
'IRTEHBEST',
'SumDumFuk',
'SLUTB6NGER66',
'InfantFister69',
'Fistersister',
'fisting grannies',
'FistMeSis',
'Fisting Sloth',
'Livingabortion',
'Floatyturd',
'Pooponmyballs',
'PoopFinger',
'Parts',
'Whackingit',
'sum az whole',
'A55 Kicken Chicken',
'HorseScrotom',
'Sausage',
'hairy sausage',
'Your Mother',
'Count Asscrackula',
'Happy Uncle',
'Dr Cocktopus',
'PullOutDad',
'I Eated a Soup',
'REVEREND TOAST',
'Rev Fondlechild',
'ButtCabbage',
'Itchy Bits',
'Jerkoff',
'A side of Ham',
'AirIsWindy',
'A Confused shoe',
'Toiletpaperman',
'MOMS SPAGHETTI',
'Milfhunter',
'xXyoloswag4jesusXx',
'LilChubby',
'GaryBuseysteeth',
'OuchHardFart',
'CourtesyFlush',
'Thermostat',
'WookiesrPpl2',
'LtDansLegs',
'ThePopesLube',
'WINDOWCLEANer',
'SwishyMcJackass',
'Pwn_Dolphins_Drink_Beer',
'I_Like_Cheese',
'Burrito',
'An18inchDildo',
'BeerAndCookies',
'I_Be-B1azin',
'WEED_IS_FOR_LOSERS',
'xBongsmoker420x',
'Bongsta',
'Gongsta',
'Teriyaki Bukake',
'BrosephStalin',
'Ichyb3ll',
'Six nippled yehti',
'GassyJalapeno',
'TwoTugTonyTheFapMaster',
'Bad Grandpa',
'ForcefulGrandpa',
'PleasenoDad',
'Beefstrokemeoff',
'Boobguy45',
'VulvaViolator',
'GayZebrasUnite',
'My Ball Sack',
'Barry Hallsacks',
'I Lick Hobos',
'Freeponyride',
'Cancer',
'IAbuseMyFish',
'DadsButtjuice',
'A Harmless Cupcake',
'a giant 8llllllD',
'ATastySandwich',
'WifeTookMyDog',
'The US Debt',
'Abs of flab',
'Moistgranny69',
'Count Swagula',
'Turdinator',
'RektalBead',
'Pulloutfailure',
'Facefart',
'Syphilis',
'StankFartass',
'Sh3Wuz18',
'BedBathNurMom',
'A CARDBOARDBOX',
'TerminatorT800',
'Get2ThaChopper',
'Ronald Raygun',
'some hippies',
'TwoOreosOneCup',
'chimp magnet',
'StrangerDanger',
'a better player',
'Chris_P_Bacon',
'TuckingFypo',
'An L Shaped Tetris Block',
'Osama_Been_Laggin',
'PeekaBooOsamaSeeU',
'About 37 cats',
'About76mexicans',
'Slagathor',
'Statutory Ape',
'IfISuckItsMyDad',
'NoMomICantPauseIt',
'8-6-7-5-3-0-9',
'FusterCluck',
'AlphaQ',
'Bilboteabaggins',
'GrammerNazi',
'Asmallbaby',
'A baby Seal',
'A Helpless Fetus',
'A_Falling_Body',
'Gnome Saying',
'Barles Charkley',
'Phuck Yuu',
'Il Phuck Yuu',
'A flying lemon',
'Dudefella',
'Use Preparation H',
'Tank Sinatra',
'Deleted User',
'TomCruisin',
'The Easter Bunny',
'Lt MorningWood',
'HanSoloDies',
'ObiWanCanBlowMe',
'GonnaMakeUQuit',
'Haywoodugofuhkurself',
'SonicTheHedgefund',
'Oh-so-damn-smart',
'FileURComplaint',
'PartyInTheUSSRx',
'xxlookXatXmyXs',
'Party_McFly',
'101WaysToMeetYourMaker',
'3D Waffle',
'Accidental Genius',
'Acid Gosling',
'Admiral Tot',
'AgentHercules',
'Airport Hobo',
'Alley Frog',
'Alpha',
'AlphaReturns',
'Angel',
'AngelsCreed',
'Arsenic Coo',
'Atomic Blastoid',
'Automatic Slicer',
'Baby Brown',
'Back Bett',
'Bad Bunny',
'Bazooka Har-de-har',
'Bearded Angler',
'Beetle King',
'Betty Cricket',
'Bit Sentinel',
'Bitmap',
'BlacKitten',
'Blister',
'Blistered Outlaw',
'Blitz',
'BloodEater',
'Bonzai',
'BoomBeachLuvr',
'BoomBlaster',
'Bootleg Taximan',
'Bowie',
'Bowler',
'Breadmaker',
'Broomspun',
'Buckshot',
'Bug Blitz',
'Bug Fire',
'Bugger',
'Cabbie',
'Candy Butcher',
'Capital F',
'Captain Peroxide',
'Celtic Charger',
'Centurion Sherman',
'Cereal Killer',
'Chasm Face',
'Chew Chew',
'Chicago Blackout',
'ChocoNutsX',
'Chocolate Thunder',
'Chuckles',
'Club Nola',
'CoB@lt',
'CobraBite',
'Cocktail',
'CollaterolDamage',
'CommandX',
'Commando',
'Congo Wire',
'Cool Iris',
'Cool Whip',
'Cosmo',
'Crash Override',
'Crash Test',
'Crazy Eights',
'Criss Cross',
'Cross Thread',
'Cujo',
'Cupid Dust',
'Dahlia Bumble',
'DaisyCraft',
'Dancing Madman',
'Dangle',
'DanimalDaze',
'Dark Horse',
'Darkside Orbit',
'Darling Peacock',
'Day Hawk',
'Desert Haze',
'Desperado',
'Devil Blade',
'Devil Chick',
'Dexter',
'Diamond Gamer',
'Digger',
'Disco Potato',
'Disco Thunder',
'DiscoMate',
'Don Stab',
'Doz Killer',
'Dredd',
'DriftDetector',
'DriftManiac',
'Drop Stone',
'Dropkick',
'Drugstore Cowboy',
'DuckDuck',
'Earl of Arms',
'Easy Sweep',
'Eerie Mizzen',
'ElactixNova',
'Elder Pogue',
'Electric Player',
'Electric Saturn',
'Ember Rope',
'Esquire',
'ExoticAlpha',
'EyeShooter',
'Fabulous',
'Fast Draw',
'FastLane',
'Father Abbot',
'FenderBoyXXX',
'Fennel Dove',
'Feral Mayhem',
'Fiend Oblivion',
'FifthHarmony',
'Fire Feline',
'Fire Fish',
'FireByMisFire',
'Fist Wizard',
'Flakes',
'Flame OUT',
'Flint',
'FlyGuardX',
'Flying Doodle',
'FrankenGrin',
'Freak',
'Frozen Explosion',
'Gadget',
'Gas Man',
'General Broomdog',
'General Finish',
'Ghostrider',
'Global meltdown',
'Glyph',
'Goatee Shield',
'Gov Skull',
'Grave Digger',
'Greek Rifle',
'Green Ghost',
'Green Scavenger',
'Guillotine',
'Gullyway',
'Guncap Slingbad',
'Gunhawk',
'HeroOfBlackday',
'High Kingdom Warrior',
'Highlander Monk',
'Hightower',
'Hog Butcher',
'HollySparta',
'Houston',
'Houston Rocket',
'Hyper',
'Hyper Kong',
'Impulsive Flower',
'Indiana',
'IonicHound',
'Jack Cassidy',
'Jelly Camber',
'Jester',
'JesterZilla',
'JigKraken',
'Jigsaw',
'Joker’s Grin',
'Judge',
'Junkyard Dog',
'K-9',
'K-Tin Man',
'Keystone',
'KiTParty',
'Kickstart',
'Kill Switch',
'Killah Goose',
'Kingfisher',
'KingofWolfstreet',
'Kitchen',
'Knight Light',
'Knuckles',
'Koi Diva',
'LFAKing',
'Lady Killer',
'Landfill Max',
'Lava Nibbler',
'Lazy Killer',
'LeSpank',
'LexusGTXXX',
'LifeRobber',
'Light Lion',
'LightInOut',
'Liquid Death',
'Liquid Science',
'Little Cobra',
'Little General',
'LittleTickle',
'Lope Lope',
'Lord Nikon',
'Lord Pistachio',
'Lord Theus',
'Lucifer\'s rain',
'Lucky',
'LunaStar',
'Lunar Treat',
'Mad Irishman',
'Mad Jack',
'Mad Kid',
'Mad Rascal',
'Mad Robin',
'ManMaker',
'Manimal',
'Marbles',
'Marigold Loot',
'Married Man',
'MarshalKing',
'Marshmallow',
'MaxicanChoncho',
'MeetWit',
'Mental',
'Mercury Reborn',
'Metal Star',
'Midas',
'Midnight Rambler',
'Midnight Rider',
'MightyFellow',
'MindBuggle',
'Mindless Bobcat',
'Mint Ness',
'MonkeyKing',
'MonkeySmash',
'MonsterMania',
'Moon Solitaire',
'Mud Pie Man',
'Mule Skinner',
'Mum Mary',
'Murmur',
'Mustang',
'MysteryEnds',
'Mystic',
'Nacho',
'Natural Gold',
'Natural Mess',
'Necromancer',
'NemesisX',
'Neophyte Believer',
'Nessie',
'New Cycle',
'New York Winder',
'Nickname Master',
'Night Magnet',
'Night Train',
'Nightmare King',
'NoiseFire',
'Nutmeg Riot',
'Old Man Winter',
'Old Orange Eyes',
'Old Regret',
'Omega Sub',
'Onion King',
'Osprey',
'Overrun',
'Papa Smurf',
'Paradise',
'Pepper Legs',
'Peppermint',
'Phoenix Tetra',
'PhoenixHeat',
'Pinball Wizard',
'Pink Hopper',
'PinkFloyd',
'PinkPanther',
'Pistol Hydro',
'Pixie Soldier',
'Pluto',
'Pogue',
'Polar Bee',
'Poppy Coffee',
'Poptart AK47',
'Prometheus',
'Psycho Thinker',
'Pusher',
'Racy Lion',
'RadioactiveMan',
'Raid Bucker',
'Rando Tank',
'Ranger',
'Red Combat',
'Red Rhino',
'RedFeet',
'RedFisher',
'RedMouth',
'Reed Lady',
'Renegade Slugger',
'Reno Monarch',
'Returns',
'RevengeOfOmega',
'Riff Raff',
'Roadblock',
'RoarSweetie',
'Rocky Highway',
'Roller Turtle',
'Romance Guppy',
'Rooster',
'Rude Sniper',
'Saint La-Z-Boy',
'Sandbox',
'Scare Stone',
'ScaryNinja',
'ScaryPumpkin',
'Scrapper',
'Scrapple',
'Screw',
'Screwtape',
'Seal Snake',
'Sexual Chocolate',
'Shadow Bishop',
'Shadow Chaser',
'Sherwood Gladiator',
'Shooter',
'ShowMeSunset',
'ShowMeUrguts',
'Sidewalk Enforcer',
'Sienna Princess',
'Silver Stone',
'Sir Shove',
'Skull Crusher',
'Sky Bully',
'Sky Herald',
'Slow Trot',
'SmartieQuest',
'SmashBuster',
'SmashDtrash',
'Snake Eyes',
'SnakeEye',
'SniperInstinct',
'SnoopWoot',
'Snow Cream',
'Snow Hound',
'Snow Pharaoh',
'SnowWhiteLuvr',
'Sofa King',
'Solo Kill',
'SpeedBreaker',
'Speedwell',
'SpellTansy',
'Spider Fuji',
'Spike',
'SpitFire',
'Spooky Yellowjacket',
'Springheel Jack',
'Spunky Comet',
'Spy',
'Squatch',
'Stacker of Wheat',
'Stallion Patton',
'Star Sword',
'Station WMD',
'Street Squirrel',
'Subzero Taffy',
'Sugar Man',
'Suicide Jockey',
'Sultan of Speed',
'SunVolt',
'Swampmasher',
'Sweet Talker',
'Swerve',
'SwiftFox',
'SwiftSpeed',
'TWitMeet',
'Tacklebox',
'Take Away',
'Tan Stallion',
'TecTonic',
'Terror Master',
'Thanksgiving',
'The China Wall',
'The Dude',
'The Final Judgement',
'The Flying Mouse',
'The Happy Jock',
'The Howling Swede',
'The Shield Toronto',
'Third Moon',
'Thrasher',
'ThunderStroke',
'Toe',
'Toolmaker',
'Tough Nut',
'ToxicCharger',
'Toy Dogwatch',
'Trash Master',
'Trash Sling',
'Trick Baron',
'Trip',
'TrixiePhany',
'Troubadour',
'TulipCake',
'Turnip King',
'Twin Blaze',
'Twinkle Cutlass',
'Twitch',
'Twix Bond',
'UCantBeatIt',
'Uncle Psycho',
'Vagabond Warrior',
'VenusLion',
'Vicious Street',
'Voluntary',
'Vortex',
'Washer',
'Waylay Dave',
'Wheels',
'White Snare',
'Wholesome',
'Widow Curio',
'Willow Dragon',
'WindyGod',
'Winter Bite',
'Wolf Tribune',
'Wolverine',
'Woo Woo',
'Wooden Man',
'Yellow Menace',
'Zero Charisma',
'Zesty Dragon',
'Zod',

'shaquille.oatmeal',
'hanging_with_my_gnomies',
'hoosier-daddy',
'fast_and_the_curious',
'averagestudent',
'BadKarma',
'google_was_my_idea',
'cute.as.ducks',

'casanova',
'real_name_hidden',
'HairyPoppins',
'fedora_the_explorer ',
'OP_rah',
'YellowSnowman',
'Joe Not Exotic',
'username_copied',
'whos_ur_buddha',
'unfinished_sentenc',
'AllGoodNamesRGone',
'Something',
'me_for_president',
'tinfoilhat',
'oprahwindfury',
'anonymouse',
'Definitely_not_an_athlete',

'HeartTicker ',
'YESIMFUNNY',
'BenAfleckIsAnOkActor',
'magicschoolbusdropout',
'Everybody',
'regina_phalange',
'PawneeGoddess ',
'pluralizes_everythings',
'chickenriceandbeans',
'test_name_please_ignore',
'IYELLALOT',
'heyyou',
'laugh_till_u_pee',
'aDistraction',
'crazy_cat_lady',
'banana_hammock',
'thegodfatherpart4',
'unfriendme',
'babydoodles',
'fluffycookie',
'buh-buh-bacon',
'ashley_said_what',
'LactoseTheIntolerant',
'ManEatsPants',
'Twentyfourhourpharmacy',
'applebottomjeans',
'Babushka',
'toastedbagelwithcreamcheese',
'baeconandeggz',
'FartinLutherKing ',
'coolshirtbra',
'kentuckycriedfricken',
'REVERANDTOAST',
'kim_chi',
'idrinkchocolatemilk',
'SaintBroseph',
'chin_chillin',
'ghostfacegangsta',
'bigfootisreal',
'santas_number1_elf',
'thehornoftheunicorn',
'iNeed2p',
'abductedbyaliens',
'actuallynotchrishemsworth',
'nachocheesefries',
'personallyvictimizedbyreginageorge',
'just-a-harmless-potato',
'FrostedCupcake',
'Avocadorable',
'fatBatman',
'quailandduckeggs',
'PaniniHead',
'mandymooressingingvoice',
'catsordogs',
'FartnRoses',
'RedMonkeyButt',
'FreddyMercurysCat',
'MasterCheif',
'FreeHugz',
'ima.robot',
'actuallythedog',
'notthetigerking',
'pixie_dust',
'ChopSuey',

'turkey_sandwich',
'B.Juice',
'Chris_P_Bacon',
'LtDansLegs',
'95.WookiesrPpl2',

'hogwartsfailure',
'CourtesyFlush',
'MomsSpaghetti',
'spongebobspineapple',
'garythesnail',
'nothisispatrick',
'CountSwagula',
'SweetP',
'PNUT',
'Snax',
'Nuggetz',
'colonel_mustards_rope',
'baby_bugga_boo',
'joancrawfordfanclub',
'fartoolong',
'loliateyourcat',
'rawr_means_iloveyou',
'ihavethingstodo.jpg',
'heresWonderwall ',
'UFO_believer',
'ihazquestion',
'SuperMagnificentExtreme',
'It’s_A _Political_ Statement ',
'TheAverageForumUser',
'just_a_teen',
'OmnipotentBeing',
'GawdOfROFLS',
'loveandpoprockz',
'2_lft_feet',
'Bread Pitt',
'rejectedbachelorcontestant',
'Schmoople',
'LOWERCASE GUY',
'Unnecessary',
'joan_of_arks_angel ',
'InstaPrincess ',
'DroolingOnU',
'Couldnt_Find_Good_Name',
'AngelWonderland ',
'Born-confused',
'SargentSaltNPepa',
'DosentAnyoneCare',
'quaratineinthesejeans',
'thanoslefthand',
'ironmansnap',
'chalametbmybae',
'peterparkerspuberty',
'severusvape',
'theotherharrypotter',
'GrangerDanger',
'BlueIvysAssistant',
'Ariana_Grandes_Ponytail ',
'HotButteryPopcorn',
'MelonSmasher',
'morgan_freeman_but_not',
'potatoxchipz',
'FoxtrotTangoLove',
'ElfishPresley',
'WustacheMax',
'JuliusSeizure',
'HeyYouNotYouYou',
'OneTonSoup',
'HoneyLemon',
'LoveMeKnot',
'Bud Lightyear',
'takenbyWine',
'taking0ver',
'Unic0rns',
'in_jail_out_soon',
'behind_you',
'itchy_and_scratchy',
'not_james_bond',
'a_collection_of_cells',
'CowabungaDude',
'TeaBaggins',
'bill_nye_the_russian_spy',
'intelligent_zombie',
'imma_rage_quit',
'kiss-my-axe',
'king_0f_dairy_queen',
'desperate_enuf',
'AirisWindy',
'cheeseinabag',
'MakunaHatata',
'rambo_was_real',
'churros4eva',
'namenotimportant',
'i_boop_ur_nose',
'image_not_uploaded',
'suck_my_popsicle',
'sofa_king_cool',
'RootinTootinPutin',
'blousesandhouses',
'iblamejordan',
'Technophyle',
'Cuddly-Wuddly',
'JesusoChristo',
'peap0ds',
'whats_ur_sign',
'TheMilkyWeigh',
'BabyBluez',
'BarbieBreath',
'MangoGoGo',
'DirtBag',
'FurReal',
'ScoobyCute',
'YouIntradouchingMyshelf',
'IwasReloading',
'WellEndowedPenguin',
'TheAfterLife',
'PuppiesnKittens',
'WakeAwake',
'Coronacosmo',
'wherearetheavocados',
'ijustwanttobeme',
'TheKidsCallMeBoss',
'SewerSquirrel',
'because.i.like.to.like',
'notmuchtoit',
'friedchocolate',
'DonWorryItsGonBK',
'Early_Morning_Coffee',
'drunkbetch',
'strawberry_pineapple',
'MissPiggysDimples',
'chickenbaconranchpizza',
'cereal_killer',


'khaleesisfourthdragon',
'darth.daenerys',
'LeslieKnopesBinder',
'BettyBoopsBoop',
'Freddie_Not_The_Fish',
'Billys_Mullet',
'Calzone_Zone',
 
'ChickyChickyParmParm',
'Adobo_Ahai',
'theoldRazzleDazzle',
'Not-Insync',
'Toiletpaperman',
'Reese WitherFork',
'LizzosFlute',
'Macauliflower Culkin',
'Llama del Rey',
'Hot Name Here',
'Carmelpoptart',
'notfunnyatall',
'Mangonificent',
'toastcrunch',
'fizzysodas',
'kokonuts',
'cherry-picked',
/*fortnite*/
'Fortnight',
'ForTonight',
'TwoWeeks',
'TwoWeeksTillXmas',
'2Weeks2Live',
'TooWeak',
'14Days',
'Fourteennights',
'Biweekly',
'FortKnight',
'KnightsOfThaFort',
'FortyKnights',
'Forty-fourNights',
'TheRoundtable',
'FawltyTowers',
'FortniteGod',
'FortniteGoddess',
'FortniteGirl',
'FortniteGal',
'PillowFort',
'MattressFort',
'BoxFort',
'FortLauderdale',
'FortKnox',
'FortBoyard',
'ForTight',
'FortNighty',
'ForPipes',
'FoNite',
'NiteFort',
'DorkNite',
'FortBites',
'FortHype',
'Fortex',
'Forex',
'AFortniteADay',
'CantAFortThis',
'MySummerVacation',
'RoyaleWCheese',
'BattleMyPal',
'FortU',
'FortOff',
'Fortov',
'ForkFight',
'VBuckeroo',
'SaveTheFort',
'Foritiswritten',
'ForScore',
'ForePlay',
'ForeSkin',
'Soul Sniper',
'Dark Hipster',
'Jute Killer',
'Fatal Mistake',
'Final Carnage',
'BubblySnowflake.',
'Shadowgamer',
'Shamefully Skilful',
'Milk Away',
'ImmortalKiller',
'Red Head',
'Butcher\'s Son',
'Bloody Saas Stalker',
'Commando2',
'AmIKilling',
'Kill Steal No Deal',
'Real Chill',
'Demon Kong',
'Gods of Undead',
'God of Blood hunters',
'Gutsy Studs',
'Frenzy Shooters',
'Covert Destroyer',
'Tilted Stabbers',
'Vampiric Ghosts',
'Dark Spirits',
'C-19 Parasites',
'Frantic Saboteur',
'Dirty Grenadier',
'Electric Tank',
'Grim Noob',
'Noobies Choosies',
'Loser Hunters',
'King-Pins',
'Gun Lords',
'Snipe the Hype',
'Loose Characters',
'Headshooter',
'AWMLover',
'AK47',
'Agent47',
'Pubgstriker',
'Gangs of COD',
'Can\'t Won\'t Don\'t',
'Demons and giants',
'Championofseas',
'Quarrelsome Strategy',
'Hungry Admirals',
'Cloudy Perpetrator',
'Fuzzy Pack',
'Straight Gangsters',
'Mortified Coercion',
'Lyrical Armed Services',
'Silver Sleek',
'Chamundaya Namah',
'HarHarKillings',
'Dev Soldiers',
'Surma Bhopali',
'Kiss No Bliss',
'Carry No bliss',
'Headhunter',
'DEADPOOL',
'Maa da Ladla',
'Agent_Sergent',
'Agent its urgent',
'Thunderbeast',
'Sniper',
'DEATH MACHINE',
'MADMAX',
'Dead show',
'GunSly Bruce Lee',
'Bad soldier',
'Psycho killer',
'Gun Guru GG',
'Sanskari',
'Faadu',
'JaiML',
'Tomato',
'Dihaati on fire',
'Bihari Boy',
'Katega',
'Saras Player',
'Straight Gangsters',
'Mortified Coercion',
'Lyrical Armed Services',
'Outrageous Dominance',
'Homely Sharpshooters',
'Plain Privilege',
'Brash Thugs',
'Annoyed Power',
'Demonic Criminals',
'NashediGang',
'Mighty Mafia',
'Trollers goals',
'KrkFans',
'DuBose',
'Complex Slayers',
'Greasy Desperado',
'Organic Punks',
'Quarrelsome Strategy',
'Bahubali',
'Bandookbaaz',
'Cheel Ki Nazar',
'Dhrona',
'Headmaster',
'Gambit',
'King Ping',
'Singh Bling',
'King Bling',
'Dizzy Irresistible',
'Nutty Domination',
'Observant Force',
'Selfish Soldiers',
'Fanatical Tyranny',
'Grieving Butchers',
'Long-term Occupation',
'Plain Privilege',
'Disagreeable Liquidators',
'Stupendous Knights',
'Regular Discipline',
'Abnormal Vigor',
'Guttural Gangsters',
'Zealous Squad',
'Homely Sharpshooters',
'Odd Hooligans',
'Ruddy Exterminators',
'Known Warfare',
'Purring Coercion',
'Annoyed Power',
'Wretched Veterans',
'Calm Outlaws',
'Medical Rebels',
'Faulty Devils',
'Glistening Prestige',
'Hungry Admirals',
'Championof7seas',
'Insaneshooter',
'Deadshot',
'Agent47',
'Chicken lovers',
'Pubgstriker',
'Destuctivevirus',
'Evildead',
'Jaabaaz',
'Gangster Anna',
'Hacker',
'Pro-Grow Blow',
'Ironman/some other hero',
'Death gun',
'Terminator x',
'Thunderbeast',
'Dynos',
'Troll',
'Dark Warrior',
'Assassin 007',
'Maarenge Marenge',
'Brookie',
'Popeyes',
'Dhoom strikas',
'Outrageous Dominance',
'Homely Sharpshooters',
'Plain Privilege',
'Brash Thugs',
'Annoyed Power',
'Demonic Criminals',
'Abnormal Vigor',
'Optimal Aces',
'Inimical Thugs',
'Fear Butchers',
'Left Divide',
'Psychedelic Servicemen',
'Militaristic Fighting Machine',
'Ball Blaster',
'Legends Reload',
'Brute Fact',
'Bloss flop',
'Tango Boss',
'Optimal Aces',
'Inimical Thugs',
'Fear Butchers',
'Left Divide',
'Psychedelic Servicemen',
'Militaristic Fighting Machine',
'Keen Team Six',
'Fuzzy Pack',
'Straight Gangsters',
'Mortified Coercion',
'Lyrical Armed Services',
'Outrageous Dominance',
'Homely Sharpshooters',
'Plain Privilege',
'Brash Thugs',
'Nutty Domination',
'Complex Slayers',
'Faulty Devils',
'Fanatical Tyranny',
'Odd Hooligans',
'Organic Punks',
'Quarrelsome Strategy',
'Hungry Admirals',
'Cloudy Perpetrator',
'Militaristic Fighting Machine',
'Keen Team Six',
'Holy JESUS',
'Lone_Ranger',
'Dark Warrior',
'XxGoldenWariorxX'
/*end fortnite*/
]
},{}],9:[function(require,module,exports){
module.exports = [
'Arsenic',
'Aspect',
'Bender',
'Big Papa',
'Bowser',
'Bruise',
'Cannon',
'Clink',
'Cobra',
'Colt',
'Crank',
'Creep',
'Daemon',
'Decay',
'Diablo',
'Doom',
'Dracula',
'Dragon',
'Fender',
'Fester',
'Fisheye',
'Flack',
'Gargoyle',
'Grave',
'Gunner',
'Hash',
'Hashtag',
'Indominus',
'Ironclad',
'Killer',
'Knuckles',
'Kraken',
'Lynch',
'Mad Dog',
'O\'Doyle',
'Psycho',
'Ranger',
'Ratchet',
'Reaper',
'Rigs',
'Ripley',
'Roadkill',
'Ronin',
'Rubble',
'Sasquatch',
'Scar',
'Shiver',
'Skinner',
'Skull Crusher',
'Slasher',
'Steelshot',
'Surge',
'Sythe',
'Trip',
'Trooper',
'Tweek',
'Vein',
'Void',
'Wardon',
'Wraith',
'Zero',
'Steel',
'Tito',
'Titanium',
'Iron-Cut',
'Steel Forge',
'Kevlar',
'Bullet-Proof',
'Hurricane',
'Tempest',
'Pursuit',
'Lightning',
'Fire-Bred',
'Ironsides',
'Iron Heart',
'Steel Foil',
'Upsurge',
'Breaker',
'Subversion',
'Uprising',
'Sabotage',
'Rebellion',
'Overthrow',
'Dissent',
'Insurgent',
'Loch',
'Rex',
'Balrog',
'Basilisk',
'Cerberus',
'Charybdis',
'Cyclops',
'Golem',
'Hydra',
'Manticore',
'Minotaur',
'Mothman',
'Orthros',
'Satyr',
'Wendigo',
'Behemoth',
'Gorgon',
'Leviathan',
'Sylla',
'Baal',
'Azrael',
'Ballistic',
'Fury',
'Wrath',
'Rage',
'Frenzy',
'Furor',
'Ire',
'Madness',
'Savage',
'Mania',
'Uproar',
'Demented',
'Schizo',
'Manic',
'Derange',
'V',
'Terminator',
'Siddhartha',
'Thor',
'Khan',
'Leonidas',
'Hannibal',
'Agrippa',
'Atilla',
'Conqueror',
'Suleiman',
'Napoleon',
'Geronimo',
'Dutch',
'Dux',
'Jesse James',
'Darko',
'Mad Max',
'Billy the Butcher',
'Maximus',
'Leon',
'Cyrus',
'Mr. Blonde',
'Matrix',
'Bleed',
'Nail',
'Fist',
'Tooth',
'K-9',
'Kneecap',
'Soleus',
'Blood',
'X-Skull',
'Jawbone',
'Skeleton',
'Craniax',
'Bone',
'Cut',
'Gash',
'Scab',
'Gut',
'Socket',
'Footslam',
'Head-Knocker',
'Razor',
'Slaughter',
'Scalp',
'Torque',
'Wracker',
'Wrecker',
'Clencher',
'Masher',
'Crusher',
'Slammer',
'Thrasher',
'Annihilator',
'Destroyer',
'Stabber',
'Hitter',
'Obliterator',
'Exterminator',
'Ruiner',
'Finisher',
'Overtaker',
'Saboteur',
'Rebel',
'Eliminator',
'Hell-Raiser',
'Mutant',
'Torpedo',
'Cannon',
'Mortar',
'Siege',
'Bullet',
'Aero',
'Albatross',
'Arsenal',
'Hornet',
'Wildcat',
'Hellcat',
'Tomcat',
'Panther',
'Jaguar',
'Bomber',
'Strike Eagle',
'Rimfire',
'Centerfire',
'Automatic',
'Glock',
'Sniper',
'Carbine',
'Javelin',
'Howitzer',
'Gatling',
'Avenger',
'Hazzard',
'Demolition',
'Chainsaw',
'Wrench',
'Power Train',
'Excavator',
'Shovel',
'Yarder',
'Trencher',
'Pile Driver',
'Terror',
'Freak',
'Axe',
'Axe-man',
'Executioner',
'Hollowman',
'Garrot',
'Abyss',
'Chasm',
'Ghoul',
'Demise',
'Grim',
'Menace',
'Dementor',
'Nightshade',
'Venom',
'The Unholy',
'Rot',
'Omen',
'Midnight',
'Phantom',
'Sepulcher',
'Damned',
'Kafka',
'Phantasm',
'Scream',
'Shriek',
'Wraith',
'Bodybag',
'Morgue',
'Mace',
'Battleaxe',
'Billhook',
'Caltrop',
'Longbow',
'Crossbow',
'Pike',
'Poleaxe',
'Quarterstaff',
'War Hammer',
'Spear',
'Katana',
'Saber',
'Broadsword',
'Claymore',
'Falchion',
'Zweihander',
'Club',
'Maul',
'Bludgeon',
'Lance',
'Tiger Claw',
'Brass Knuckle',
'Gauntlet',
'Katar',
'Dagger',
'Gladius',
'Cutlass',
'Scimitar',
'Espada',
'Montante',
'Hatchet',
'Hammer',
'Sledgehammer',
'Harpoon',
'Angon',
'Fire Lance',
'Matchlock',
'Bullwhip',
'Flying Claw',
'Slungshot',
'Aspis',
'Blade',
'Lockback',
'Machete',
'Grizzly',
'Snake',
'Vulture',
'Falcon',
'Ram',
'Boar',
'Tusk',
'Wolverine',
'Wolf',
'Claw',
'Fang',
'Grip',
'Black Mamba',
'Goshawk',
'Deathstalker',
'Scorpion',
'Boomslang',
'Viper',
'Sting',
'Lash',
'Gnaw',
'Aidyn',
'Akuji',
'Akuma',
'Alistair',
'Alucard',
'Arc',
'Ash',
'Banjo',
'Cave',
'Cloud',
'Crash',
'Cyrax',
'Dante',
'Daxter',
'Ding',
'Duke',
'Ermac',
'Ezio',
'Falco',
'Fox',
'Genji',
'Godot',
'Goemon',
'Goku',
'Goro',
'Hanzo',
'Hiro',
'Ico',
'Ike',
'Iori',
'Jago',
'Jak',
'Jax',
'Jedah',
'Jojo',
'Kage',
'Kain',
'Kane',
'Kanji',
'Kazooie',
'Kialos',
'Kirby',
'Klonoa',
'Link',
'Luigi',
'Majora',
'Maximo',
'Munch',
'Neo',
'Nero',
'Niko',
'Oro',
'Parappa',
'Phoenix',
'Rad',
'Raiden',
'Ridley',
'Rufus',
'Rygar',
'Ryu',
'Scorpion',
'Spyro',
'Squall',
'Tidus',
'Toan',
'Trevor',
'Valentine',
'Vyse',
'Wolf',
'Yoshi',
'Zell',
'Zidan',
'Ace',
'Adonis',
'Amor',
'Badboy',
'Bam Bam',
'Bear',
'Beast',
'Beef',
'Biggie',
'Boner',
'Boss',
'Cowboy',
'Daddy',
'Elmo',
'Gasoline',
'Gangster',
'Gizmo',
'Godzilla',
'Grandpa',
'Grasshopper',
'Handsome',
'Harvard',
'Hero',
'Hercules',
'Hollywood',
'Hoss',
'Hunk',
'Jedi',
'Macho',
'Mayhem',
'Motown',
'Monster',
'Moose',
'Muscle',
'Nemo',
'Pickle',
'Player',
'Poker',
'Pooh',
'Pops',
'Prince',
'Pup',
'Rockstar',
'Romeo',
'Scooter',
'Skipper',
'Sparkie',
'Superfly',
'Teddy',
'Tiger',
'Train',
'Turtle',
'Vegas',
'Waldo',
'Winner',
'Daemon',
'Man',
'Boy',
'Iron Man',
'Cedar',
'Basil',
'Ren',
'Jared',
'Indigo',
'Sorrel',
'Swine',
'Rabbit',
'Lion',
'Horse',
'Beetle',
'Gunder',
'Stallion',
'Elephant',
'Mammoth',
'Bull',
'Dude',
'Virus',
'Son',
'Cousin',
'Uncle',
'Father',
'Grandfather',
'Godfather'
].map(text => text.trim().toLocaleLowerCase());
},{}],10:[function(require,module,exports){
module.exports = [
'She\'sAKeeper',
'She\'sAShooter',
'LaDiabla',
'TriggerHappiGrl',
'FeMaLe PlAyEr',
'Mystify',
'QueenPlayer',
'AshtrayBullets',
'PsychoGirl',
'Spartenette',
'spartan chick',
'Vamprika',
'KatanaLover',
'TheFemaleSensei',
'FemFatale',
'Fatal Feminines',
'beastly dudette',
'WomanScorned',
'BitchtoKill',
'ColdBitch',
'Dominatrix',
'KissOfDeathAim',
'MissGirlGuns',
'GeekGirl',
'MeanGirl',
'RunLikeAGirl',
'PlayLikeAGirl',
'KillLikeAGirl',
'Misdemeanor',
'AppleBottoms',
'AppleBottomJeans',
'murda',
'GirlsPwn',
'WarGoddess',
'ManiakChikk',
'TheDevilWearsPrada',
'XxD3V1LxG1RLxX',
'Chiefette',
'GurlyGurl',
'CantTouchThis',
'Miss Glock&heels',
'Beat By A Girl',
'BeatMyALady',
'MurderedByAGirl',
'VictoryOverBoys',
'UGotRektByAChick',
'LaGamer',
'AGirlYouBK',
'NotAGirlyGirl',
'ManKiller',
'UR GYNECOLOGIST',
'IfImBadItsMyBoyfriend',
'Amanda_huggenkiss',
'Igetnaked',
'Vald Bagina',
'Ava-Cake',
'xSmells Fishyx',
'MuffensNkittens',
'MrsLivingZombie',
'YeastyQueef',
'QWEF',
'x Hairy Marry x',
'MustachioedGal',
'DontHarrassMe',
'RESPECTMECUZIMAGIRL',
'XxpetmykittyxX',
'Xxomg_what_shoes_to_wearxX',
'Lucy Lastic',
'Ilikemen',
'PonytailExpress',
'CoolestPonytail',
'LemonParty',
'KitchenParty',
'Tide2kitchen',
'IShudBNDKtchn',
'KitchenBound',
'Forevakitchen',
'Kitchenology',
'Thekitchenisforchumps',
'KitchenHunter',
'LostInTheKitchen',
'LockedInTheKitchen',
'KitchenDesigner',
'KitchenHo',
'RenaissanceKitchen',
'ModernKitchen',
'KitchenCannibal',
'KitchenKiller',
'KitchenSink',
'KitchenKnife',
'WhatIsKitchen?',
'LivinLaVidaKitchen',
'RhymesWithKitchen',
'KitchenPride',
'DinnerWillBL8',
'WashingUpLiquid',
'GetALifeYouPervert',
'PervertExposer',
'xxH0RNYCHICK69xx',
'FondaCox',
'RecklessClam',
'Vagisil',
'Vagiskill',
'MeanPaulaDeen',
'MissWaitWhat',
'CrustyTampon',
'Str8UpLesbian',
'PrincessNguns',
'XxLooseVagxX',
'ThaTzWhaTsHeSaId',
'Juggsy_Malone',
'GrumpyCat',
'MiserableCat',
'Mummyfarts',
'HouseWifeForLife',
'TheHusbandSux',
'Tits>Balls',
'AttentionSeeker',
'InsufferableAttentionWhore',
'Ilovdik23',
'Ihatedik23',
'Gold_Digger_For_Life',
'Missbehave',
'SammichMaker',
'Imakesandwiches',
'SandwichEater',
'SandwichSlicer',
'DuzMyA55L00kBig1nThis',
'HotPeriodBlood',
'PeriodPains',
'Fatsinglemom',
'xxBig Tiddysxx',
'BluffinWithMyMuffin',
'Ibeatanorexia311',
'DumbsterBabies',
'x female grizzy x',
'MissLittleRed',
'Woman12345',
'Marge Simpson',
'Urexwife',
'TheGirlWhoDumpedU',
'Confusedgirl',
'EstroJen',
'DopeySuperwoman',
'NotAnotherGamerGirl',
'Spokeswomen',
'HippoBottom',
'Gamergirl',
'Blush',
'BlushingTokki',
'MaryPoppins',
'BabiiCakezz',
'Sp0use',
'TeaCupCake7',
'WheresPeterPan',
'Skybby',
'PrincessGunfire',
'KatKnip',
'Kitteh Power',
'MamaKitty',
'MeowMix',
'KittenForVictory',
'K1TT3NSnK1LLS',
'BubbleHearts',
'Friendette',
'SleepingBeauty',
'GamingBeauty',
'LovelyKiller',
'SquirrelPower',
'blosSomP!nK',
'AstroGirl',
'MisFit',
'MissNeverLand',
'QtPie',
'Beastings',
'SmittenKitten',
'UKittenMe',
'MidnightKitty',
'LaLaLand',
'ScarfFace',
'DillyDally',
'MissChief',
'AngelBunny',
'Goldilocks',
'LilRedRiddingHood',
'ZebraCakes',
'BettyBoop',
'GlitterR0CkZ',
'AngelicSnipeZ',
'1Love1Heart1Girl',
'Blosson&Bubbles',
'Maiden',
'Catastrophe',
'HiddenKiss',
'MissWhiteRose',
'GorgeousGamer',
'HotChocolate',
'manic_pixie_meme_ girl',
'Daffy Girl',
'Pearl Girl',
'hotgirlbummer',
'VenusQueen',
'Chip Queen',
'Little Miss Misery',
'AngelicPrincessKristy',
'KristyHoney',
/*fortnite*/
'Dare the Flare',
'Butcher\'s daughter',
'Selfish Queen',
'Gold digger',
'Asli Heera',
'Jungli Billi',
'Junglee Sherni',
'Papa ki sniper',
'YourBFStares',
'Shy Gun',
'Candy Queens',
'Rosies',
'Killing Kissers',
'Margolem',
'Bloody Mary',
'legendary Princess',
'Slaying Girling',
'Pink Leader',
'Cinderella',
'Padmavati',
'Gun Digger',
'Her Majesty',
'Leading Light',
'Queen Bee',
'Battle Mistress',
'Young Lady',
'Winner Woman',
'Chicky Fighter',
'Gentle Woman',
'Cute Crashers',
'BeachesGotU',
'Maa Ki Ladli'
/*end fortnite*/
];
},{}],11:[function(require,module,exports){
module.exports = ['Aberr',
'Acid',
'Ada',
'Aeon',
'Aerith',
'Aeryn',
'Agitator',
'Agony',
'Alien',
'Alma',
'Alyx',
'Amaretto',
'Amazon',
'Ambush',
'Animus',
'Anomaly',
'Aoi',
'Arbitrage',
'Arsenic',
'Arsenal',
'Artemis',
'Arya',
'Ashtart',
'Astaroth',
'Astor',
'Asuka',
'Atalanta',
'Athena',
'Athena',
'Atom',
'Atomic',
'Audacity',
'Ayame',
'Ayu',
'Babylon Candle',
'Bacardi',
'Baccarat',
'Bane',
'Banshee',
'Barbarian',
'Baroness',
'Bat',
'Bayonetta',
'Beguile',
'Belladonna',
'Bellagio',
'Belle Starr',
'Bellona',
'Beretta',
'Berserk',
'Beryllium',
'Big Time',
'Bitten',
'Black Beauty',
'Black Cat',
'Cat',
'Cow',
'Chicken',
'Chick',
'Deer',
'Goose',
'Sheep',
'Whale',
'Swan',
'Blackjack',
'Blaze',
'Bloodrayne',
'Bookie',
'Boudica',
'Brass',
'Breach',
'Brigitte',
'Buffy',
'Calamity Jane',
'Calypso',
'Cammy',
'Caprice',
'Carbon',
'Cascade',
'Cassie',
'Catch-22',
'Cate',
'Catwoman',
'Chai',
'Charade',
'Chicanery',
'Chloe',
'Chromium',
'Clementine',
'Cleo',
'Coffy',
'Cognac',
'Colada',
'Colestah',
'Comet',
'Cortana',
'Corybantic',
'Cosma',
'Cougar',
'Countess',
'Coyote',
'Crafty',
'Crazed',
'Crimson',
'Croft',
'Crow',
'Crucible',
'Curio',
'Cyanide',
'Dagger',
'Daisy',
'Daphne',
'Daredevil',
'Dark Matter',
'Daydream',
'Dazzler',
'Deceit',
'Deception',
'Deep Pockets',
'Delirious',
'Delusion',
'Devi',
'Deviant',
'Dice',
'Die-hard',
'Dihya',
'Dismay',
'Dom',
'Don',
'Double Double',
'Duchess',
'Earth Metal',
'Egomania',
'Electron',
'Elektra',
'Element',
'Elemental',
'Elena',
'Elexis',
'Empress',
'Enchantress',
'Enigma',
'Enmity',
'Entropy',
'Enyo',
'Eon',
'Eowyn',
'Epona',
'Eternity',
'Etna',
'Eva',
'Explosive',
'Fanatic',
'Fate',
'Feint',
'Felicia',
'Femme Fatale',
'Figment',
'Firebringer',
'Firecracker',
'Fishnet',
'Forever',
'Fox',
'Franziska',
'Fright',
'Geisha',
'Goddess',
'Grenade',
'Grudge',
'Gunpowder',
'Half Pint',
'Harlem',
'Haunter',
'Hauteur',
'Hawkeye',
'Helena',
'Helium',
'Hemlock',
'Hero',
'Heroin',
'Herzogin',
'High Roller',
'Hildegard',
'Horror',
'Hostility',
'Hot Salt',
'Hua Mulan',
'Hypernova',
'Illumine',
'Illusion',
'Immortal',
'Imoen',
'Inferno',
'Infinity',
'Insomnia',
'Ion',
'Irons',
'Ishtar',
'Isis',
'Ivy',
'Ivy',
'Jade',
'Jaheira',
'Joose',
'Jubilee',
'Juno',
'Juri',
'Kahina',
'Kairi',
'Kasumi',
'Kat',
'Katniss',
'Keno',
'Kiddo',
'Kitana',
'Kula',
'Lab Rat',
'Lara',
'Leeloo',
'Legacy',
'Lili',
'Lilly',
'Linh',
'Lithium',
'Lock',
'Lolita',
'Lotus',
'Lucina',
'M-80',
'Madam',
'Mademoiselle',
'Majesty',
'Maki',
'Malevolence',
'Malice',
'Maniac',
'Mannequin',
'Marquess',
'Mathilda',
'Medb',
'Medium',
'Medusa',
'Mei',
'Mercenary',
'Mercury',
'Mercury',
'Mercy',
'Meteor',
'Mileena',
'Militant',
'Millia',
'Minx',
'Mirage',
'Miss Fortune',
'Missile',
'Mojave',
'Morrigan',
'Mortal',
'Mortar',
'Myth',
'Narcissus',
'Navi',
'Nefertiti',
'Neon',
'Nerve',
'Nevada',
'Night Terror',
'Nightmare',
'Nightshade',
'Nilin',
'Noir',
'Nova',
'Nuclear',
'Oleander',
'Orb',
'Osmium',
'Padme',
'Pai',
'Paine',
'Panic',
'Paramour',
'Peach',
'Pearl Heart',
'Phobia',
'Phosphorescent',
'Phosphorus',
'Photon',
'Pocket Rocket',
'Poison',
'Poker',
'Polgara',
'Predator',
'Prodigy',
'Protostar',
'Pumps',
'Puzzler',
'Pyro',
'Quistis',
'Rabid',
'Radiate',
'Radical',
'Radioactive',
'Radium',
'Radon',
'Ramona',
'Rancor',
'Raven',
'Rayne',
'Real Deal',
'Red Dog',
'Redox',
'Redux',
'Regina',
'Reiko',
'Reno',
'Resin',
'Revolution',
'Rikku',
'Rinoa',
'Riveter',
'Rocks',
'Rogue',
'Roman Candle',
'Rosalina',
'Rose',
'Roulette',
'Running Eagle',
'Rynn',
'Sakura',
'Samus',
'Satyr',
'Scheme',
'Scotch',
'Sekhmet',
'Selenium',
'Selkie',
'Selphie',
'Serpent',
'Sever',
'Shadow',
'Shantae',
'Sheva',
'Shieldmaiden',
'Shion',
'Shodan',
'Silk Spectre',
'Sindel',
'Siren',
'Smoke Bomb',
'Snake Eyes',
'Sophitia',
'Sora',
'Spider',
'Spite',
'Spitefulness',
'Steppe',
'Stiletto',
'Storm',
'Stratosphere',
'Supernova',
'Swagger',
'T-Back',
'Taki',
'Tanit',
'Tank',
'Tattoo',
'Temperance',
'Tequila',
'Terror',
'Teuta',
'Thunderbird',
'Tifa',
'Torchy',
'Toxin',
'Trick',
'Trinity',
'Two Face',
'Ultra',
'Unstoppable',
'Vainglory',
'Valkyrie',
'Vanity',
'Vapor',
'Variance',
'Variant',
'Vegas',
'Velvet',
'Venom',
'Venus',
'Vex',
'Vile',
'Villain',
'Virtual',
'Virus',
'Vixen',
'Volt',
'Voodoo',
'Voyager',
'Wanderer',
'Watchface',
'Waylay',
'Whiskey',
'White Tights',
'Wicked',
'Widow',
'X-hibit',
'X-Ray',
'X-Treme',
'Xenon',
'Xenon',
'Ygritte',
'Yuna',
'Yuri',
'Zealot',
'Zelda',
'Zen',
'Zinc',
'Zoe',
'Angel',
'Babe',
'Babycakes',
'Bambi',
'Barbie',
'Beautiful',
'Bella',
'Betty Boo',
'Cookie',
'Critter',
'Cupcake',
'Cuteness',
'Darling',
'Dear',
'Dimples',
'Flame',
'Gaga',
'Giggles',
'Gorgeous',
'Hotlips',
'Jellybean',
'Juliet',
'Kitten',
'Loca',
'Momacita',
'Meow',
'Minnie',
'Missy',
'Mouse',
'Mooncake',
'Muffin',
'Munchkin',
'Pancake',
'Peaches',
'Peanut',
'Pebbles',
'Pet',
'Pookie',
'Pop Tart',
'Precious',
'Princess',
'Pumpkin',
'Skittles',
'Smiles',
'Snowflake',
'Squirrel',
'Sugar',
'Sunshine',
'Sushi',
'Tart',
'Tinkerbell',
'Tootsie',
'Tweety',
'Twinkle',
'Yummy',
'Girl',
'Woman',
'Female',
'Bitch',
'Honey',
'Lover',
'Zombie',
'Wife',
'Mistress',
'Dudette',
'Leilani',
'Marguerite',
'Fleur',
'Azalea',
'Alyssa',
'Jasmine',
'Yasmin',
'Cassia',
'Erica',
'Zinnia',
'Violet',
'Aster',
'Iris',
'Marigold',
'Poppy',
'Primrose',
'Dahlia',
'Heather',
'Holly',
'Sage',
'Quarantine',
'Corona',
'Daughter',
'Cousin',
'Aunt',
'Grandma',
'Grandmother',
'Mother'
].map(text => text.trim().toLocaleLowerCase());
},{}],12:[function(require,module,exports){
module.exports=["Armor",
 "Anomaly",
 "Trink",
 "Twitch",
 "Username",
 "Critical",
 "Digital",
 "Virtual",
 "Opportunity",
 "Chief",
 "Officer",
 "Destiny",
 "Identity",
 "Atalante",
 "Blaser",
 "Camden",
 "Patriot",
 "Fury",
 "Fire",
 "Lotus"].map(text => text.trim().toLocaleLowerCase());
},{}],13:[function(require,module,exports){
/**
 * @file A fantasy name generator library.
 * @version 1.0.0
 * @license Public Domain
 *
 * This library is designed after the RinkWorks Fantasy Name Generator.
 * @see http://www.rinkworks.com/namegen/
 *
 * @example
 * var generator = NameGen.compile("sV'i");
 * generator.toString();  // Emits a new name on each call
 * // => "entheu'loaf"
 *
 * ## Pattern Syntax
 *
 *   The compile() function creates a name generator based on an input
 * pattern. The letters s, v, V, c, B, C, i, m, M, D, and d represent
 * different types of random replacements. Everything else is emitted
 * literally.
 *
 *   s - generic syllable
 *   v - vowel
 *   V - vowel or vowel combination
 *   c - consonant
 *   B - consonant or consonant combination suitable for beginning a word
 *   C - consonant or consonant combination suitable anywhere in a word
 *   i - insult
 *   m - mushy name
 *   M - mushy name ending
 *   D - consonant suited for a stupid person's name
 *   d - syllable suited for a stupid person's name (begins with a vowel)
 *
 *   All characters between parenthesis () are emitted literally. For
 * example, the pattern "s(dim)", emits a random generic syllable
 * followed by "dim".
 *
 *   Characters between angle brackets <> emit patterns from the table
 * above. Imagine the entire pattern is wrapped in one of these.
 *
 *   In both types of groupings, a vertical bar | denotes a random
 * choice. Empty groups are allowed. For example, "(foo|bar)" emits
 * either "foo" or "bar". The pattern "<c|v|>" emits a constant,
 * vowel, or nothing at all.
 *
 *   An exclamation point ! means to capitalize the component that
 * follows it. For example, "!(foo)" will emit "Foo" and "v!s" will
 * emit a lowercase vowel followed by a capitalized syllable, like
 * "eRod".
 *
 *   A tilde ~ means to reverse the letters of the component that
 * follows it. For example, "~(foo)" will emit "oof". To reverse an
 * entire template, wrap it in brackets. For example, to reverse
 * "sV'i" as a whole use "~<sV'i>". The template "~sV'i" will only
 * reverse the initial syllable.
 *
 * ## Internals
 *
 *   A name generator is anything with a toString() method, including,
 * importantly, strings themselves. The generator constructors
 * (Random, Sequence) perform additional optimizations when *not* used
 * with the `new` keyword: they may pass through a provided generator,
 * combine provided generators, or even return a simple string.
 *
 *   New pattern symbols added to NameGen.symbols will automatically
 * be used by the compiler.
 */

/**
 * Number of generated output possibilities (generator function).
 * @returns {number}
 * @method
 */
String.prototype.combinations = function() { return 1; };

/**
 * Longest possible output length (generator function).
 * @returns {number}
 * @method
 */
String.prototype.min = function() { return this.length; };

/**
 * Shortest possible output length (generator function).
 * @returns {number}
 * @method
 */
String.prototype.max = function() { return this.length; };

/**
 * List all possible outputs (generator function).
 * @returns {Array} An array of output strings.
 * @method
 */
String.prototype.enumerate = function() { return [String(this)]; };

/**
 * @namespace NameGen Everything relevant to the name generators.
 */
var NameGen = NameGen || {};

/**
 * Strings generated by the symbol generators.
 */
NameGen.symbols = {
    s: ['ach', 'ack', 'ad', 'age', 'ald', 'ale', 'an', 'ang', 'ar', 'ard',
        'as', 'ash', 'at', 'ath', 'augh', 'aw', 'ban', 'bel', 'bur', 'cer',
        'cha', 'che', 'dan', 'dar', 'del', 'den', 'dra', 'dyn', 'ech', 'eld',
        'elm', 'em', 'en', 'end', 'eng', 'enth', 'er', 'ess', 'est', 'et',
        'gar', 'gha', 'hat', 'hin', 'hon', 'ia', 'ight', 'ild', 'im', 'ina',
        'ine', 'ing', 'ir', 'is', 'iss', 'it', 'kal', 'kel', 'kim', 'kin',
        'ler', 'lor', 'lye', 'mor', 'mos', 'nal', 'ny', 'nys', 'old', 'om',
        'on', 'or', 'orm', 'os', 'ough', 'per', 'pol', 'qua', 'que', 'rad',
        'rak', 'ran', 'ray', 'ril', 'ris', 'rod', 'roth', 'ryn', 'sam',
        'say', 'ser', 'shy', 'skel', 'sul', 'tai', 'tan', 'tas', 'ther',
        'tia', 'tin', 'ton', 'tor', 'tur', 'um', 'und', 'unt', 'urn', 'usk',
        'ust', 'ver', 'ves', 'vor', 'war', 'wor', 'yer'],
    v: ['a', 'e', 'i', 'o', 'u', 'y'],
    V: ['a', 'e', 'i', 'o', 'u', 'y', 'ae', 'ai', 'au', 'ay', 'ea', 'ee',
        'ei', 'eu', 'ey', 'ia', 'ie', 'oe', 'oi', 'oo', 'ou', 'ui'],
    c: ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r',
        's', 't', 'v', 'w', 'x', 'y', 'z'],
    B: ['b', 'bl', 'br', 'c', 'ch', 'chr', 'cl', 'cr', 'd', 'dr', 'f', 'g',
        'h', 'j', 'k', 'l', 'll', 'm', 'n', 'p', 'ph', 'qu', 'r', 'rh', 's',
        'sch', 'sh', 'sl', 'sm', 'sn', 'st', 'str', 'sw', 't', 'th', 'thr',
        'tr', 'v', 'w', 'wh', 'y', 'z', 'zh'],
    C: ['b', 'c', 'ch', 'ck', 'd', 'f', 'g', 'gh', 'h', 'k', 'l', 'ld', 'll',
        'lt', 'm', 'n', 'nd', 'nn', 'nt', 'p', 'ph', 'q', 'r', 'rd', 'rr',
        'rt', 's', 'sh', 'ss', 'st', 't', 'th', 'v', 'w', 'y', 'z'],
    i: ['air', 'ankle', 'ball', 'beef', 'bone', 'bum', 'bumble', 'bump',
        'cheese', 'clod', 'clot', 'clown', 'corn', 'dip', 'dolt', 'doof',
        'dork', 'dumb', 'face', 'finger', 'foot', 'fumble', 'goof',
        'grumble', 'head', 'knock', 'knocker', 'knuckle', 'loaf', 'lump',
        'lunk', 'meat', 'muck', 'munch', 'nit', 'numb', 'pin', 'puff',
        'skull', 'snark', 'sneeze', 'thimble', 'twerp', 'twit', 'wad',
        'wimp', 'wipe'],
    m: ['baby', 'booble', 'bunker', 'cuddle', 'cuddly', 'cutie', 'doodle',
        'foofie', 'gooble', 'honey', 'kissie', 'lover', 'lovey', 'moofie',
        'mooglie', 'moopie', 'moopsie', 'nookum', 'poochie', 'poof',
        'poofie', 'pookie', 'schmoopie', 'schnoogle', 'schnookie',
        'schnookum', 'smooch', 'smoochie', 'smoosh', 'snoogle', 'snoogy',
        'snookie', 'snookum', 'snuggy', 'sweetie', 'woogle', 'woogy',
        'wookie', 'wookum', 'wuddle', 'wuddly', 'wuggy', 'wunny'],
    M: ['boo', 'bunch', 'bunny', 'cake', 'cakes', 'cute', 'darling',
        'dumpling', 'dumplings', 'face', 'foof', 'goo', 'head', 'kin',
        'kins', 'lips', 'love', 'mush', 'pie', 'poo', 'pooh', 'pook', 'pums'],
    D: ['b', 'bl', 'br', 'cl', 'd', 'f', 'fl', 'fr', 'g', 'gh', 'gl', 'gr',
        'h', 'j', 'k', 'kl', 'm', 'n', 'p', 'th', 'w'],
    d: ['elch', 'idiot', 'ob', 'og', 'ok', 'olph', 'olt', 'omph', 'ong',
        'onk', 'oo', 'oob', 'oof', 'oog', 'ook', 'ooz', 'org', 'ork', 'orm',
        'oron', 'ub', 'uck', 'ug', 'ulf', 'ult', 'um', 'umb', 'ump', 'umph',
        'un', 'unb', 'ung', 'unk', 'unph', 'unt', 'uzz']
};

/**
 * Return true if the given thing is a string.
 * @param object - The object to be tested
 * @returns {boolean}
 * @private
 */
NameGen._isString = function(object) {
    return Object.prototype.toString.call(object) === '[object String]';
};

/**
 * Combine adjacent strings in the array.
 * @param {Array} array - The array to be compressed (unmodified)
 * @returns {Array} A new array with the strings compressed
 * @private
 */
NameGen._compress = function(array) {
    var emit = [], accum = [];
    function dump() {
        if (accum.length > 0) {
            emit.push(accum.join(''));
            accum.length = 0;
        }
    }
    for (var i = 0; i < array.length; i++) {
        if (NameGen._isString(array[i])) {
            accum.push(array[i]);
        } else {
            dump();
            emit.push(array[i]);
        }
    }
    dump();
    return emit;
};

/**
 * @param {string} string
 * @returns {string}
 */
NameGen._capitalize = function(string) {
    return string.replace(/^./, function(c) {
        return c.toUpperCase();
    });
};

/**
 * @param {string} string
 * @returns {string}
 */
NameGen._reverse = function(string) {
    return string.split(/(?:)/).reverse().join('');
};

/**
 * When emitting, selects a random generator.
 * @param {Array} generators - An array of name generators
 * @returns A name generator, not necessarily a new one
 * @constructor
 */
NameGen.Random = function Random(generators) {
    if (!(this instanceof NameGen.Random)) {
        switch (generators.length) {
        case 0:
            return '';
        case 1:
            return generators[0];
        default:
            return new NameGen.Random(generators);
        }
    }
    this.sub = generators;
    return this;
};

/**
 * Generate a new name.
 * @returns {string}
 * @method
 */
NameGen.Random.prototype.toString = function() {
    if (this.sub.length > 0) {
        var i = Math.floor(Math.random() * this.sub.length);
        return this.sub[i].toString();
    } else {
        return '';
    }
};

/**
 * Number of generated output possibilities (generator function).
 * @returns {number}
 * @method
 */
NameGen.Random.prototype.combinations = function() {
    return Math.max(1, this.sub.reduce(function(total, g) {
        return total + g.combinations();
    }, 0));
};

/**
 * Shortest possible output length (generator function).
 * @returns {number}
 * @method
 */
NameGen.Random.prototype.min = function() {
    return Math.min.apply(null, this.sub.map(function(g) {
        return g.min();
    }));
};

/**
 * Longest possible output length (generator function).
 * @returns {number}
 * @method
 */
NameGen.Random.prototype.max = function() {
    return Math.max.apply(null, this.sub.map(function(g) {
        return g.max();
    }));
};

/**
 * Enumerate all possible outputs.
 * @returns {Array} An array of all possible outputs.
 * @method
 */
NameGen.Random.prototype.enumerate = function() {
    var enums = this.sub.map(function(g) { return g.enumerate(); });
    return Array.prototype.concat.apply(enums[0], enums.slice(1));
};

/**
 * Runs each provided generator in turn when generating.
 * @param {Array} generators - An array of name generators
 * @returns A name generator, not necessarily a new one
 * @constructor
 */
NameGen.Sequence = function Sequence(generators) {
    generators = NameGen._compress(generators);
    if (!(this instanceof NameGen.Sequence)) {
        switch (generators.length) {
        case 0:
            return '';
        case 1:
            return generators[0];
        default:
            return new NameGen.Sequence(generators);
        }
    }
    this.sub = generators;
    return this;
};

/**
 * Generate a new name.
 * @returns {string}
 * @method
 */
NameGen.Sequence.prototype.toString = function() {
    return this.sub.join('');
};

/**
 * Number of generated output possibilities (generator function).
 * @returns {number}
 * @method
 */
NameGen.Sequence.prototype.combinations = function() {
    return this.sub.reduce(function(total, g) {
        return total * g.combinations();
    }, 1);
};

/**
 * Shortest possible output length (generator function).
 * @returns {number}
 * @method
 */
NameGen.Sequence.prototype.min = function() {
    return this.sub.reduce(function(total, g) {
        return total + g.min();
    }, 0);
};

/**
 * Longest possible output length (generator function).
 * @returns {number}
 * @method
 */
NameGen.Sequence.prototype.max = function() {
    return this.sub.reduce(function(total, g) {
        return total + g.max();
    }, 0);
};

/**
 * Enumerate all possible outputs.
 * @returns {Array} An array of all possible outputs.
 * @method
 */
NameGen.Sequence.prototype.enumerate = function() {
    var enums = this.sub.map(function(g) { return g.enumerate(); });
    function enumerate(enums, prefix) {
        if (enums.length === 1) {
            return enums[0].map(function(e) {
                return prefix + e;
            });
        } else {
            var output = [];
            var rest = enums.slice(1);
            for (var i = 0; i < enums[0].length; i++) {
                output.push(enumerate(rest, prefix + enums[0][i]));
            }
            return Array.prototype.concat.apply([], output);
        }
    }
    return enumerate(enums, '');
};

/**
 * Create a new type of generator based on a string transform function.
 * @param {Function} f
 */
NameGen.fromTransform = function(f) {
    function G(generator) {
        if (!(this instanceof G)) {
            if (NameGen._isString(generator)) {
                return f(generator);
            } else {
                return new G(generator);
            }
        }
        this.generator = generator;
        return this;
    }

    G.prototype.toString = function() {
        return f(this.generator.toString());
    };
    G.prototype.combinations = function() {
        return this.generator.combinations();
    };
    G.prototype.min = function() {
        return this.generator.min();
    };
    G.prototype.max = function() {
        return this.generator.max();
    };
    G.prototype.enumerate = function() {
        return this.generator.enumerate().map(f);
    };

    return G;
};

/**
 * Decorate a generator by capitalizing its output.
 * @constructor
 */
NameGen.Capitalizer = NameGen.fromTransform(NameGen._capitalize);

/**
 * Decorate a generator by reversing its output.
 * @constructor
 */
NameGen.Reverser = NameGen.fromTransform(NameGen._reverse);

/* Everything below here is the compiler. */

/**
 * Builds up a generator grouping in the compiler.
 * @constructor
 */
NameGen._Group = function() {
    this.set = [[]];
    this.wrappers = [];
};

/**
 * @param g The generator to add to this group
 * @returns This object
 */
NameGen._Group.prototype.add = function(g) {
    while (this.wrappers.length > 0) {
        var type = this.wrappers.pop();
        g = type(g);
    }
    this.set[this.set.length - 1].push(g);
    return this;
};

/**
 * Start a new grouping in this generator group.
 * @returns This object
 */
NameGen._Group.prototype.split = function() {
    this.set.push([]);
    return this;
};

/**
 * Wrap the next added generator with this decorator.
 * @param type The type of the decorator to wrap.
 * @returns This object
 */
NameGen._Group.prototype.wrap = function(type) {
    this.wrappers.push(type);
    return this;
};

/**
 * @returns A generator built from this grouping.
 */
NameGen._Group.prototype.emit = function() {
    return NameGen.Random(this.set.map(NameGen.Sequence));
};

/**
 * Builds up a literal grouping in the compiler.
 * @constructor
 */
NameGen._Literal = function() {
    NameGen._Group.call(this);
};
NameGen._Literal.prototype = Object.create(NameGen._Group.prototype);

/**
 * Builds up a symbolic grouping in the compiler.
 * @constructor
 */
NameGen._Symbol = function() {
    NameGen._Group.call(this);
};
NameGen._Symbol.prototype = Object.create(NameGen._Group.prototype);

/**
 * Add a new generator based on a character.
 * @param c The generator's symbol
 * @returns This object
 */
NameGen._Symbol.prototype.add = function(g, literal) {
    if (!literal) {
        g = NameGen.Random(NameGen.symbols[g] || [g]);
    }
    NameGen._Group.prototype.add.call(this, g);
    return this;
};

/**
 * Compile a generator specification string into a generator.
 * @param {string} input - The pattern string to compile
 * @returns A name generator
 */
NameGen.compile = function(input) {
    var stack = [];
    stack.top = function() {
        return stack[stack.length - 1];
    };

    stack.push(new NameGen._Symbol());
    for (var i = 0; i < input.length; i++) {
        var c = input[i];
        switch (c) {
        case '<':
            stack.push(new NameGen._Symbol());
            break;
        case '(':
            stack.push(new NameGen._Literal());
            break;
        case '>':
        case ')':
            if (stack.length === 1) {
                throw new Error('Unbalanced brackets.');
            } else if (c === '>' && stack.top() instanceof NameGen._Literal) {
                throw new Error('Unexpected ">" in input.');
            } else if (c === ')' && stack.top() instanceof NameGen._Symbol) {
                throw new Error('Unexpected ")" in input.');
            }
            var last = stack.pop().emit();
            stack.top().add(last, true);
            break;
        case '|':
            stack.top().split();
            break;
        case '!':
            if (stack.top() instanceof NameGen._Symbol) {
                stack.top().wrap(NameGen.Capitalizer);
            } else {
                stack.top().add(c);
            }
            break;
        case '~':
            if (stack.top() instanceof NameGen._Symbol) {
                stack.top().wrap(NameGen.Reverser);
            } else {
                stack.top().add(c);
            }
            break;
        default:
            stack.top().add(c);
            break;
        }
    }
    if (stack.length !== 1) {
        throw new Error('Missing closing bracket.');
    } else {
        return stack.top().emit();
    }
};

module.exports = NameGen;
},{}]},{},[2]);
